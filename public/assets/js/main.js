/*! For license information please see main.js.LICENSE.txt */
!function(){"use strict";var t={99:function(t,e,n){var r,i,o=n(655),a=n(589),s=n(909),u=n(594),c=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r["invalid-log-argument"]="First argument to `onLog` must be null or a function.",r),h=new a.LL("app","Firebase",c),l="@firebase/app",p="[DEFAULT]",f=((i={})[l]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),d=new u.Yd("@firebase/app"),v=function(){function t(t,e,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=(0,a.p$)(t),this.container=new s.H0(e.name),this._addComponent(new s.wA("app",(function(){return u}),"PUBLIC"));try{for(var c=(0,o.XA)(this.firebase_.INTERNAL.components.values()),h=c.next();!h.done;h=c.next()){var l=h.value;this._addComponent(l)}}catch(t){r={error:t}}finally{try{h&&!h.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=p),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=p),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){d.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw h.create("app-deleted",{appName:this.name_})},t}();v.prototype.name&&v.prototype.options||v.prototype.delete||console.log("dc");var y=function t(){var e=function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=p);var s=o.name;if("string"!=typeof s||!s)throw h.create("bad-app-name",{appName:String(s)});if((0,a.r3)(e,s))throw h.create("duplicate-app",{appName:s});var u=new t(n,o,r);return e[s]=u,u},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=f[t])&&void 0!==r?r:t;n&&(i+="-"+n);var o=i.match(/\s|\//),a=e.match(/\s|\//);if(o||a){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return o&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&u.push("and"),a&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void d.warn(u.join(" "))}c(new s.wA(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:u.Ub,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw h.create("invalid-log-argument",{appName:name});(0,u.Am)(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:c,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function i(t){if(t=t||p,!(0,a.r3)(e,t))throw h.create("no-app",{appName:t});return e[t]}function c(s){var u,c,l=s.name;if(n.has(l))return d.debug("There were multiple attempts to register component "+l+"."),"PUBLIC"===s.type?r[l]:null;if(n.set(l,s),"PUBLIC"===s.type){var p=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[l])throw h.create("invalid-app-argument",{appName:l});return t[l]()};void 0!==s.serviceProps&&(0,a.ZB)(p,s.serviceProps),r[l]=p,t.prototype[l]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,l).apply(this,s.multipleInstances?t:[])}}try{for(var f=(0,o.XA)(Object.keys(e)),v=f.next();!v.done;v=f.next()){var y=v.value;e[y]._addComponent(s)}}catch(t){u={error:t}}finally{try{v&&!v.done&&(c=f.return)&&c.call(f)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?r[l]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(v);return e.INTERNAL=(0,o.pi)((0,o.pi)({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){(0,a.ZB)(e,t)},createSubscribe:a.ne,ErrorFactory:a.LL,deepExtend:a.ZB}),e}(),g=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if((0,a.jU)()&&void 0!==self.firebase){d.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var m=self.firebase.SDK_VERSION;m&&m.indexOf("LITE")>=0&&d.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var _=y.initializeApp;y.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,a.UG)()&&d.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),_.apply(void 0,t)};var b=y;!function(t,e){t.INTERNAL.registerComponent(new s.wA("platform-logger",(function(t){return new g(t)}),"PRIVATE")),t.registerVersion(l,"0.6.13",void 0),t.registerVersion("fire-js","")}(b),e.Z=b},909:function(t,e,n){n.d(e,{wA:function(){return o},H0:function(){return u},zt:function(){return s}});var r=n(655),i=n(589),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),a="[DEFAULT]",s=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=a);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new i.BH;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=(0,r.pi)({identifier:a,optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var s=this.getOrInitializeService(o);if(!s){if(i)return null;throw Error("Service "+this.name+" is not available")}return s}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(a)}catch(t){}try{for(var i=(0,r.XA)(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var s=(0,r.CR)(o.value,2),u=s[0],c=s[1],h=this.normalizeInstanceIdentifier(u);try{var l=this.getOrInitializeService(h);c.resolve(l)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=a),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,r.mG)(this,void 0,void 0,(function(){var t;return(0,r.Jh)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,r.fl)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===a?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:a:t},t}(),u=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new s(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},446:function(t,e,n){var r=n(99),i=n(655),o=n(589),a=n(594),s=n(909);t=n.hmd(t);var u,c=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),(0,o.Pz)(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:(0,o.cI)(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),h=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return(0,o.r3)(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),l=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new c(e)}}catch(t){}return new h},p=l("localStorage"),f=l("sessionStorage"),d=new a.Yd("@firebase/database"),v=(u=1,function(){return u++}),y=function(t){var e=(0,o.dS)(t),n=new o.gQ;n.update(e);var r=n.digest();return o.US.encodeByteArray(r)},g=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++){var i=t[r];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?n+=g.apply(null,i):n+="object"==typeof i?(0,o.Pz)(i):i,n+=" "}return n},m=null,_=!0,b=function(t,e){(0,o.hu)(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(d.logLevel=a.in.VERBOSE,m=d.log.bind(d),e&&f.set("logging_enabled",!0)):"function"==typeof t?m=t:(m=null,f.remove("logging_enabled"))},w=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===_&&(_=!1,null===m&&!0===f.get("logging_enabled")&&b(!0)),m){var n=g.apply(null,t);m(n)}},E=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];w.apply(void 0,(0,i.fl)([t],e))}},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+g.apply(void 0,(0,i.fl)(t));d.error(n)},I=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+g.apply(void 0,(0,i.fl)(t));throw d.error(n),new Error(n)},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+g.apply(void 0,(0,i.fl)(t));d.warn(n)},S=function(t){return"number"==typeof t&&(t!=t||t===Number.POSITIVE_INFINITY||t===Number.NEGATIVE_INFINITY)},N="[MIN_NAME]",A="[MAX_NAME]",P=function(t,e){if(t===e)return 0;if(t===N||e===A)return-1;if(e===N||t===A)return 1;var n=G(t),r=G(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},k=function(t,e){return t===e?0:t<e?-1:1},R=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+(0,o.Pz)(e))},D=function(t){if("object"!=typeof t||null===t)return(0,o.Pz)(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",i=0;i<e.length;i++)0!==i&&(r+=","),r+=(0,o.Pz)(e[i]),r+=":",r+=D(t[e[i]]);return r+"}"},O=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r};function x(t,e){for(var n in t)t.hasOwnProperty(n)&&e(n,t[n])}var L,F,M,j,U,V,W,q,H,B,Q=function(t){(0,o.hu)(!S(t),"Invalid JSON number");var e,n,r,i,a;0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074))));var s=[];for(a=52;a;a-=1)s.push(r%2?1:0),r=Math.floor(r/2);for(a=11;a;a-=1)s.push(n%2?1:0),n=Math.floor(n/2);s.push(e?1:0),s.reverse();var u=s.join(""),c="";for(a=0;a<64;a+=8){var h=parseInt(u.substr(a,8),2).toString(16);1===h.length&&(h="0"+h),c+=h}return c.toLowerCase()},K=new RegExp("^-?(0*)\\d{1,10}$"),G=function(t){if(K.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},z=function(t){try{t()}catch(t){setTimeout((function(){var e=t.stack||"";throw T("Exception was thrown by user callback.",e),t}),Math.floor(0))}},Y=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},X=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!1,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=P(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),J=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=(0,o.ug)(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!1,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!1,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=(0,o.ug)(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=(0,o.ug)(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0===this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),$="firebaseio.com",Z="websocket",tt="long_polling",et=function(){function t(t,e,n,r,i,o,a){void 0===i&&(i=!1),void 0===o&&(o=""),void 0===a&&(a=!1),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.nodeAdmin=i,this.persistenceKey=o,this.includeNamespaceInQueryParams=a,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=p.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&p.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if((0,o.hu)("string"==typeof t,"typeof type must == string"),(0,o.hu)("object"==typeof e,"typeof params must == object"),t===Z)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==tt)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return x(e,(function(t,e){r.push(t+"="+e)})),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}(),nt=function(t,e){var n=rt(t),r=n.namespace;"firebase.com"===n.domain&&I(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),r&&"undefined"!==r||"localhost"===n.domain||I("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&T("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var i="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new et(n.host,n.secure,r,e,i,"",r!==n.subdomain),path:new X(n.pathString)}},rt=function(t){var e="",n="",r="",o="",a="",s=!0,u="https",c=443;if("string"==typeof t){var h=t.indexOf("//");h>=0&&(u=t.substring(0,h-1),t=t.substring(h+2));var l=t.indexOf("/");-1===l&&(l=t.length);var p=t.indexOf("?");-1===p&&(p=t.length),e=t.substring(0,Math.min(l,p)),l<p&&(o=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(l,p)));var f=function(t){var e,n,r={};"?"===t.charAt(0)&&(t=t.substring(1));try{for(var o=(0,i.XA)(t.split("&")),a=o.next();!a.done;a=o.next()){var s=a.value;if(0!==s.length){var u=s.split("=");2===u.length?r[decodeURIComponent(u[0])]=decodeURIComponent(u[1]):T("Invalid query segment '"+s+"' in query '"+t+"'")}}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return r}(t.substring(Math.min(t.length,p)));(h=e.indexOf(":"))>=0?(s="https"===u||"wss"===u,c=parseInt(e.substring(h+1),10)):h=e.length;var d=e.slice(0,h);if("localhost"===d.toLowerCase())n="localhost";else if(d.split(".").length<=2)n=d;else{var v=e.indexOf(".");r=e.substring(0,v).toLowerCase(),n=e.substring(v+1),a=r}"ns"in f&&(a=f.ns)}return{host:e,port:c,domain:n,subdomain:r,secure:s,scheme:u,pathString:o,namespace:a}},it=/[\[\].#$\/\u0000-\u001F\u007F]/,ot=/[\[\].#$\u0000-\u001F\u007F]/,at=10485760,st=function(t){return"string"==typeof t&&0!==t.length&&!it.test(t)},ut=function(t){return"string"==typeof t&&0!==t.length&&!ot.test(t)},ct=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!S(t)||t&&"object"==typeof t&&(0,o.r3)(t,".sv")},ht=function(t,e,n,r,i){i&&void 0===n||lt((0,o.gK)(t,e,i),n,r)},lt=function(t,e,n){var r=n instanceof X?new J(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(S(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>at/3&&(0,o.ug)(e)>at)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var i=!1,a=!1;if(x(e,(function(e,n){if(".value"===e)i=!0;else if(".priority"!==e&&".sv"!==e&&(a=!0,!st(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),lt(t,n,r),r.pop()})),i&&a)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},pt=function(t,e,n,r,i){if(!i||void 0!==n){var a=(0,o.gK)(t,e,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(a+" must be an object containing the children to replace.");var s=[];x(n,(function(t,e){var n=new X(t);if(lt(a,e,r.child(n)),".priority"===n.getBack()&&!ct(e))throw new Error(a+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(n)})),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!st(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(X.comparePaths);var a=null;for(n=0;n<e.length;n++){if(r=e[n],null!==a&&a.contains(r))throw new Error(t+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(a,s)}},ft=function(t,e,n,r){if(!r||void 0!==n){if(S(n))throw new Error((0,o.gK)(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ct(n))throw new Error((0,o.gK)(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},dt=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error((0,o.gK)(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},vt=function(t,e,n,r){if(!(r&&void 0===n||st(n)))throw new Error((0,o.gK)(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},yt=function(t,e,n,r){if(!(r&&void 0===n||ut(n)))throw new Error((0,o.gK)(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},gt=function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),yt(t,e,n,r)},mt=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},_t=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!st(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),ut(t)}(r))throw new Error((0,o.gK)(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},bt=function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error((0,o.gK)(t,e,r)+"must be a boolean.")},wt=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){(0,o.Dv)("OnDisconnect.cancel",0,1,arguments.length),(0,o.Wj)("OnDisconnect.cancel",1,t,!0);var e=new o.BH;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){(0,o.Dv)("OnDisconnect.remove",0,1,arguments.length),mt("OnDisconnect.remove",this.path_),(0,o.Wj)("OnDisconnect.remove",1,t,!0);var e=new o.BH;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){(0,o.Dv)("OnDisconnect.set",1,2,arguments.length),mt("OnDisconnect.set",this.path_),ht("OnDisconnect.set",1,t,this.path_,!1),(0,o.Wj)("OnDisconnect.set",2,e,!0);var n=new o.BH;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){(0,o.Dv)("OnDisconnect.setWithPriority",2,3,arguments.length),mt("OnDisconnect.setWithPriority",this.path_),ht("OnDisconnect.setWithPriority",1,t,this.path_,!1),ft("OnDisconnect.setWithPriority",2,e,!1),(0,o.Wj)("OnDisconnect.setWithPriority",3,n,!0);var r=new o.BH;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if((0,o.Dv)("OnDisconnect.update",1,2,arguments.length),mt("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}pt("OnDisconnect.update",1,t,this.path_,!1),(0,o.Wj)("OnDisconnect.update",2,e,!0);var i=new o.BH;return this.repo_.onDisconnectUpdate(this.path_,t,i.wrapCallback(e)),i.promise},t}(),Et=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return(0,o.Dv)("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),Ct=(L="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",F=0,M=[],function(t){var e,n=t===F;F=t;var r=new Array(8);for(e=7;e>=0;e--)r[e]=L.charAt(t%64),t=Math.floor(t/64);(0,o.hu)(0===t,"Cannot push at time == 0");var i=r.join("");if(n){for(e=11;e>=0&&63===M[e];e--)M[e]=0;M[e]++}else for(e=0;e<12;e++)M[e]=Math.floor(64*Math.random());for(e=0;e<12;e++)i+=L.charAt(M[e]);return(0,o.hu)(20===i.length,"nextPushId: Length should be 20."),i}),It=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),Tt=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new It(N,t),r=new It(N,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return It.MIN},t}(),St=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return j},set:function(t){j=t},enumerable:!1,configurable:!0}),e.prototype.compare=function(t,e){return P(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw(0,o.g5)("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return It.MIN},e.prototype.maxPost=function(){return new It(A,j)},e.prototype.makePost=function(t,e){return(0,o.hu)("string"==typeof t,"KeyIndex indexValue must always be a string."),new It(t,j)},e.prototype.toString=function(){return".key"},e}(Tt),Nt=new St,At=function(t){return"number"==typeof t?"number:"+Q(t):"string:"+t},Pt=function(t){if(t.isLeafNode()){var e=t.val();(0,o.hu)("string"==typeof e||"number"==typeof e||"object"==typeof e&&(0,o.r3)(e,".sv"),"Priority must be a string or number.")}else(0,o.hu)(t===U||t.isEmpty(),"priority of unexpected type.");(0,o.hu)(t===U||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},kt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,(0,o.hu)(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Pt(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return V},set:function(t){V=t},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:((0,o.hu)(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+At(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?Q(this.value_):this.value_,this.lazyHash_=y(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:((0,o.hu)(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,i=t.VALUE_TYPE_ORDER.indexOf(n),a=t.VALUE_TYPE_ORDER.indexOf(r);return(0,o.hu)(i>=0,"Unknown leaf type: "+n),(0,o.hu)(a>=0,"Unknown leaf type: "+r),i===a?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:a-i},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}(),Rt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?P(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return It.MIN},e.prototype.maxPost=function(){return new It(A,new kt("[PRIORITY-POST]",q))},e.prototype.makePost=function(t,e){var n=W(t);return new It(e,new kt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(Tt)),Dt=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),Ot=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Lt.EMPTY_NODE,this.right=null!=o?o:Lt.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||!!t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Lt.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Lt.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var t=this.left.check_();if(t!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),xt=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new Ot(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Lt=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,Ot.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,Ot.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new Dt(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new Dt(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new Dt(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new Dt(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new xt,t}(),Ft=Math.log(2),Mt=function(){function t(t){var e;this.count=(e=t+1,parseInt(Math.log(e)/Ft,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=t+1&r}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),jt=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,a,s=r-e;if(0===s)return null;if(1===s)return o=t[e],a=n?n(o):o,new Ot(a,o.node,Ot.BLACK,null,null);var u=parseInt(s/2,10)+e,c=i(e,u),h=i(u+1,r);return o=t[u],a=n?n(o):o,new Ot(a,o.node,Ot.BLACK,c,h)},o=function(e){for(var r=null,o=null,a=t.length,s=function(e,r){var o=a-e,s=a;a-=e;var c=i(o+1,s),h=t[o],l=n?n(h):h;u(new Ot(l,h.node,r,null,c))},u=function(t){r?(r.left=t,r=t):(o=t,r=t)},c=0;c<e.count;++c){var h=e.nextBitIsOne(),l=Math.pow(2,e.count-(c+1));h?s(l,Ot.BLACK):(s(l,Ot.BLACK),s(l,Ot.RED))}return o}(new Mt(t.length));return new Lt(r||e,o)},Ut={},Vt=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return(0,o.hu)(Ut&&Rt,"ChildrenNode.ts has not been loaded"),H=H||new t({".priority":Ut},{".priority":Rt})},enumerable:!1,configurable:!0}),t.prototype.get=function(t){var e=(0,o.DV)(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e instanceof Lt?e:null},t.prototype.hasIndex=function(t){return(0,o.r3)(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){(0,o.hu)(e!==Nt,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,a=[],s=!1,u=n.getIterator(It.Wrap),c=u.getNext();c;)s=s||e.isDefinedOn(c.node),a.push(c),c=u.getNext();r=s?jt(a,e.getCompare()):Ut;var h=e.toString(),l=(0,i.pi)({},this.indexSet_);l[h]=e;var p=(0,i.pi)({},this.indexes_);return p[h]=r,new t(p,l)},t.prototype.addToIndexes=function(e,n){var r=this;return new t((0,o.UI)(this.indexes_,(function(t,i){var a=(0,o.DV)(r.indexSet_,i);if((0,o.hu)(a,"Missing index implementation for "+i),t===Ut){if(a.isDefinedOn(e.node)){for(var s=[],u=n.getIterator(It.Wrap),c=u.getNext();c;)c.name!==e.name&&s.push(c),c=u.getNext();return s.push(e),jt(s,a.getCompare())}return Ut}var h=n.get(e.name),l=t;return h&&(l=l.remove(new It(e.name,h))),l.insert(e,e.node)})),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t((0,o.UI)(this.indexes_,(function(t){if(t===Ut)return t;var r=n.get(e.name);return r?t.remove(new It(e.name,r)):t})),this.indexSet_)},t}();function Wt(t,e){return P(t.name,e.name)}function qt(t,e){return P(t,e)}var Ht=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Pt(this.priorityNode_),this.children_.isEmpty()&&(0,o.hu)(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return B||(B=new t(new Lt(qt),null,Vt.Default))},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||B},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?B:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if((0,o.hu)(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r=new It(e,n),i=void 0,a=void 0;n.isEmpty()?(i=this.children_.remove(e),a=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(e,n),a=this.indexMap_.addToIndexes(r,this.children_));var s=i.isEmpty()?B:this.priorityNode_;return new t(i,s,a)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;(0,o.hu)(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Rt,(function(a,s){n[a]=s.val(e),r++,o&&t.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1})),!e&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+At(this.getPriority().val())+":"),this.forEachChild(Rt,(function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)})),this.lazyHash_=""===t?"":y(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new It(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new It(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new It(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal((function(t){return e(t.name,t.node)})):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,(function(t){return t}));for(var r=this.children_.getIteratorFrom(t.name,It.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,(function(t){return t}));for(var r=this.children_.getReverseIteratorFrom(t.name,It.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Bt?-1:0},t.prototype.withIndex=function(e){if(e===Nt||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===Nt||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(Rt),r=e.getIterator(Rt),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===Nt?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Bt=new(function(t){function e(){return t.call(this,new Lt(qt),Ht.EMPTY_NODE,Vt.Default)||this}return(0,i.ZT)(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return Ht.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(Ht));function Qt(t,e){if(void 0===e&&(e=null),null===t)return Ht.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),(0,o.hu)(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new kt(t,Qt(e));if(t instanceof Array){var n=Ht.EMPTY_NODE;return x(t,(function(e,r){if((0,o.r3)(t,e)&&"."!==e.substring(0,1)){var i=Qt(r);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(e,i))}})),n.updatePriority(Qt(e))}var r=[],i=!1;if(x(t,(function(t,e){if("."!==t.substring(0,1)){var n=Qt(e);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),r.push(new It(t,n)))}})),0===r.length)return Ht.EMPTY_NODE;var a=jt(r,Wt,(function(t){return t.name}),qt);if(i){var s=jt(r,Rt.getCompare());return new Ht(a,Qt(e),new Vt({".priority":s},{".priority":Rt}))}return new Ht(a,Qt(e),Vt.Default)}Object.defineProperties(It,{MIN:{value:new It(N,Ht.EMPTY_NODE)},MAX:{value:new It(A,Bt)}}),St.__EMPTY_NODE=Ht.EMPTY_NODE,kt.__childrenNodeConstructor=Ht,U=Bt,q=Bt,function(t){W=t}(Qt);var Kt,Gt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?P(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return It.MIN},e.prototype.maxPost=function(){return It.MAX},e.prototype.makePost=function(t,e){var n=Qt(t);return new It(e,n)},e.prototype.toString=function(){return".value"},e}(Tt)),zt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,(0,o.hu)(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return(0,i.ZT)(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?P(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=Qt(t),r=Ht.EMPTY_NODE.updateChild(this.indexPath_,n);return new It(e,r)},e.prototype.maxPost=function(){var t=Ht.EMPTY_NODE.updateChild(this.indexPath_,Bt);return new It(A,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(Tt),Yt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return(0,o.Dv)("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return(0,o.Dv)("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return(0,o.Dv)("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return(0,o.Dv)("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){(0,o.Dv)("DataSnapshot.child",0,1,arguments.length),e=String(e),yt("DataSnapshot.child",1,e,!1);var n=new X(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,Rt)},t.prototype.hasChild=function(t){(0,o.Dv)("DataSnapshot.hasChild",1,1,arguments.length),yt("DataSnapshot.hasChild",1,t,!1);var e=new X(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return(0,o.Dv)("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;if((0,o.Dv)("DataSnapshot.forEach",1,1,arguments.length),(0,o.Wj)("DataSnapshot.forEach",1,e,!1),this.node_.isLeafNode())return!1;var r=this.node_;return!!r.forEachChild(this.index_,(function(r,i){return e(new t(i,n.ref_.child(r),Rt))}))},t.prototype.hasChildren=function(){return(0,o.Dv)("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!1,configurable:!0}),t.prototype.numChildren=function(){return(0,o.Dv)("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return(0,o.Dv)("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),t}(),Xt=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+(0,o.Pz)(this.snapshot.exportVal())},t}(),Jt=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),$t=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new Xt("value",this,new Yt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){(0,o.hu)(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Jt(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Zt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,(0,o.r3)(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Jt(this,t,e):null},t.prototype.createEvent=function(t,e){(0,o.hu)(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new Xt(t.type,this,new Yt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){(0,o.hu)(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){var n=this;if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var r=Object.keys(e.callbacks_),i=Object.keys(this.callbacks_),o=r.length;if(o===i.length){if(1===o){var a=r[0],s=i[0];return!(s!==a||e.callbacks_[a]&&this.callbacks_[s]&&e.callbacks_[a]!==this.callbacks_[s])}return i.every((function(t){return e.callbacks_[t]===n.callbacks_[t]}))}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),te=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return(0,o.hu)(Kt,"Reference.ts has not been loaded"),Kt},set:function(t){Kt=t},enumerable:!1,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===Nt){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!==N)throw new Error(r);if("string"!=typeof e)throw new Error(i)}if(t.hasEnd()){if(t.getIndexEndName()!==A)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(t.getIndex()===Rt){if(null!=e&&!ct(e)||null!=n&&!ct(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if((0,o.hu)(t.getIndex()instanceof zt||t.getIndex()===Gt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return(0,o.Dv)("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,i){(0,o.Dv)("Query.on",2,4,arguments.length),dt("Query.on",1,e,!1),(0,o.Wj)("Query.on",2,n,!1);var a=t.getCancelAndContextArgs_("Query.on",r,i);if("value"===e)this.onValueEvent(n,a.cancel,a.context);else{var s={};s[e]=n,this.onChildEvent(s,a.cancel,a.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new $t(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Zt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){(0,o.Dv)("Query.off",0,3,arguments.length),dt("Query.off",1,t,!0),(0,o.Wj)("Query.off",2,e,!0),(0,o.lb)("Query.off",3,n,!0);var r=null,i=null;if("value"===t){var a=e||null;r=new $t(a,null,n||null)}else t&&(e&&((i={})[t]=e),r=new Zt(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.get=function(){return this.repo.getValue(this)},t.prototype.once=function(e,n,r,i){var a=this;(0,o.Dv)("Query.once",1,4,arguments.length),dt("Query.once",1,e,!1),(0,o.Wj)("Query.once",2,n,!0);var s=t.getCancelAndContextArgs_("Query.once",r,i),u=!0,c=new o.BH;c.promise.catch((function(){}));var h=function(t){u&&(u=!1,a.off(e,h),n&&n.bind(s.context)(t),c.resolve(t))};return this.on(e,h,(function(t){a.off(e,h),s.cancel&&s.cancel.bind(s.context)(t),c.reject(t)})),c.promise},t.prototype.limitToFirst=function(e){if((0,o.Dv)("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if((0,o.Dv)("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if((0,o.Dv)("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');yt("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new X(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new zt(n),i=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(i),new t(this.repo,this.path,i,!0)},t.prototype.orderByKey=function(){(0,o.Dv)("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(Nt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){(0,o.Dv)("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(Rt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){(0,o.Dv)("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(Gt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),(0,o.Dv)("Query.startAt",0,2,arguments.length),ht("Query.startAt",1,e,this.path,!0),vt("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),(0,o.Dv)("Query.endAt",0,2,arguments.length),ht("Query.endAt",1,e,this.path,!0),vt("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if((0,o.Dv)("Query.equalTo",1,2,arguments.length),ht("Query.equalTo",1,t,this.path,!1),vt("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return(0,o.Dv)("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return(0,o.Dv)("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=D(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if((0,o.Dv)("Query.isEqual",1,1,arguments.length),!(e instanceof t)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}var r=this.repo===e.repo,i=this.path.equals(e.path),a=this.queryIdentifier()===e.queryIdentifier();return r&&i&&a},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,(0,o.Wj)(t,3,r.cancel,!0),r.context=n,(0,o.lb)(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error((0,o.gK)(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),t}(),ee=function(){function t(t){this.node_=t}return t.prototype.getImmediateChild=function(e){return new t(this.node_.getImmediateChild(e))},t.prototype.node=function(){return this.node_},t}(),ne=function(){function t(t,e){this.syncTree_=t,this.path_=e}return t.prototype.getImmediateChild=function(e){var n=this.path_.child(e);return new t(this.syncTree_,n)},t.prototype.node=function(){return this.syncTree_.calcCompleteEventCache(this.path_)},t}(),re=function(t,e,n){return t&&"object"==typeof t?((0,o.hu)(".sv"in t,"Unexpected leaf node or priority contents"),"string"==typeof t[".sv"]?ie(t[".sv"],e,n):"object"==typeof t[".sv"]?oe(t[".sv"],e):void(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2))):t},ie=function(t,e,n){switch(t){case"timestamp":return n.timestamp;default:(0,o.hu)(!1,"Unexpected server value: "+t)}},oe=function(t,e,n){t.hasOwnProperty("increment")||(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2));var r=t.increment;"number"!=typeof r&&(0,o.hu)(!1,"Unexpected increment value: "+r);var i=e.node();if((0,o.hu)(null!=i,"Expected ChildrenNode.EMPTY_NODE for nulls"),!i.isLeafNode())return r;var a=i.getValue();return"number"!=typeof a?r:a+r},ae=function(t,e,n,r){return ue(e,new ne(n,t),r)},se=function(t,e,n){return ue(t,new ee(e),n)};function ue(t,e,n){var r,i=t.getPriority().val(),o=re(i,e.getImmediateChild(".priority"),n);if(t.isLeafNode()){var a=t,s=re(a.getValue(),e,n);return s!==a.getValue()||o!==a.getPriority().val()?new kt(s,Qt(o)):t}var u=t;return r=u,o!==u.getPriority().val()&&(r=r.updatePriority(new kt(o))),u.forEachChild(Rt,(function(t,i){var o=ue(i,e.getImmediateChild(t),n);o!==i&&(r=r.updateImmediateChild(t,o))})),r}var ce,he=function(){function t(){this.value=null,this.children=new Map}return t.prototype.find=function(t){if(null!=this.value)return this.value.getChild(t);if(!t.isEmpty()&&this.children.size>0){var e=t.getFront();return t=t.popFront(),this.children.has(e)?this.children.get(e).find(t):null}return null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value=n,this.children.clear();else if(null!==this.value)this.value=this.value.updateChild(e,n);else{var r=e.getFront();this.children.has(r)||this.children.set(r,new t);var i=this.children.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value=null,this.children.clear(),!0;if(null!==this.value){if(this.value.isLeafNode())return!1;var e=this.value;this.value=null;var n=this;return e.forEachChild(Rt,(function(t,e){n.remember(new X(t),e)})),this.forget(t)}if(this.children.size>0){var r=t.getFront();return t=t.popFront(),this.children.has(r)&&this.children.get(r).forget(t)&&this.children.delete(r),0===this.children.size}return!0},t.prototype.forEachTree=function(t,e){null!==this.value?e(t,this.value):this.forEachChild((function(n,r){var i=new X(t.toString()+"/"+n);r.forEachTree(i,e)}))},t.prototype.forEachChild=function(t){this.children.forEach((function(e,n){t(n,e)}))},t}();!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(ce||(ce={}));var le,pe,fe=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,(0,o.hu)(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),de=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=ce.ACK_USER_WRITE,this.source=fe.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return(0,o.hu)(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new X(e));return new t(X.Empty,n,this.revert)}return(0,o.hu)(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),ve=function(){function t(t,e){void 0===e&&(le||(le=new Lt(k)),e=le),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return x(e,(function(t,e){n=n.set(new X(t),e)})),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:X.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new X(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,(function(){return!0}))},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r,i=e.getFront(),o=(this.children.get(i)||t.Empty).setTree(e.popFront(),n);return r=o.isEmpty()?this.children.remove(i):this.children.insert(i,o),new t(this.value,r)},t.prototype.fold=function(t){return this.fold_(X.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal((function(r,i){n[r]=i.fold_(t.child(r),e)})),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,X.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,X.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(X.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal((function(n,r){r.foreach_(t.child(n),e)})),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal((function(e,n){n.value&&t(e,n.value)}))},t.Empty=new t(null),t}(),ye=function(){function t(t,e){this.source=t,this.path=e,this.type=ce.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,X.Empty):new t(this.source,this.path.popFront())},t}(),ge=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=ce.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,X.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),me=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=ce.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new X(e));return n.isEmpty()?null:n.value?new ge(this.source,X.Empty,n.value):new t(this.source,X.Empty,n)}return(0,o.hu)(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),_e=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),be=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new _e(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new _e(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new _e(Ht.EMPTY_NODE,!1,!1),new _e(Ht.EMPTY_NODE,!1,!1)),t}(),we=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),Ee=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,i,a){(0,o.hu)(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var s=t.getImmediateChild(e);return s.getChild(r).equals(n.getChild(r))&&s.isEmpty()===n.isEmpty()?t:(null!=a&&(n.isEmpty()?t.hasChild(e)?a.trackChildChange(we.childRemovedChange(e,s)):(0,o.hu)(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):s.isEmpty()?a.trackChildChange(we.childAddedChange(e,n)):a.trackChildChange(we.childChangedChange(e,n,s))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(Rt,(function(t,r){e.hasChild(t)||n.trackChildChange(we.childRemovedChange(t,r))})),e.isLeafNode()||e.forEachChild(Rt,(function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(we.childChangedChange(e,r,i))}else n.trackChildChange(we.childAddedChange(e,r))}))),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?Ht.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),Ce=function(){function t(){this.changeMap=new Map}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;(0,o.hu)(e===we.CHILD_ADDED||e===we.CHILD_CHANGED||e===we.CHILD_REMOVED,"Only child changes supported for tracking"),(0,o.hu)(".priority"!==n,"Only non-priority child changes can be tracked.");var r=this.changeMap.get(n);if(r){var i=r.type;if(e===we.CHILD_ADDED&&i===we.CHILD_REMOVED)this.changeMap.set(n,we.childChangedChange(n,t.snapshotNode,r.snapshotNode));else if(e===we.CHILD_REMOVED&&i===we.CHILD_ADDED)this.changeMap.delete(n);else if(e===we.CHILD_REMOVED&&i===we.CHILD_CHANGED)this.changeMap.set(n,we.childRemovedChange(n,r.oldSnap));else if(e===we.CHILD_CHANGED&&i===we.CHILD_ADDED)this.changeMap.set(n,we.childAddedChange(n,t.snapshotNode));else{if(e!==we.CHILD_CHANGED||i!==we.CHILD_CHANGED)throw(0,o.g5)("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap.set(n,we.childChangedChange(n,t.snapshotNode,r.oldSnap))}}else this.changeMap.set(n,t)},t.prototype.getChanges=function(){return Array.from(this.changeMap.values())},t}(),Ie=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),Te=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new _e(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),Se=function(t,e){this.viewCache=t,this.changes=e},Ne=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){(0,o.hu)(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),(0,o.hu)(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,i){var a,s,u=new Ce;if(n.type===ce.OVERWRITE){var c=n;c.source.fromUser?a=this.applyUserOverwrite_(e,c.path,c.snap,r,i,u):((0,o.hu)(c.source.fromServer,"Unknown source."),s=c.source.tagged||e.getServerCache().isFiltered()&&!c.path.isEmpty(),a=this.applyServerOverwrite_(e,c.path,c.snap,r,i,s,u))}else if(n.type===ce.MERGE){var h=n;h.source.fromUser?a=this.applyUserMerge_(e,h.path,h.children,r,i,u):((0,o.hu)(h.source.fromServer,"Unknown source."),s=h.source.tagged||e.getServerCache().isFiltered(),a=this.applyServerMerge_(e,h.path,h.children,r,i,s,u))}else if(n.type===ce.ACK_USER_WRITE){var l=n;a=l.revert?this.revertUserWrite_(e,l.path,r,i,u):this.ackUserWrite_(e,l.path,l.affectedTree,r,i,u)}else{if(n.type!==ce.LISTEN_COMPLETE)throw(0,o.g5)("Unknown operation type: "+n.type);a=this.listenComplete_(e,n.path,r,u)}var p=u.getChanges();return t.maybeAddValueEvent_(e,a,p),new Se(a,p)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(we.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,i){var a=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var s=void 0,u=void 0;if(e.isEmpty())if((0,o.hu)(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var c=t.getCompleteServerSnap(),h=c instanceof Ht?c:Ht.EMPTY_NODE,l=n.calcCompleteEventChildren(h);s=this.filter_.updateFullNode(t.getEventCache().getNode(),l,i)}else{var p=n.calcCompleteEventCache(t.getCompleteServerSnap());s=this.filter_.updateFullNode(t.getEventCache().getNode(),p,i)}else{var f=e.getFront();if(".priority"===f){(0,o.hu)(1===e.getLength(),"Can't have a priority with additional path components");var d=a.getNode();u=t.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(e,d,u);s=null!=v?this.filter_.updatePriority(d,v):a.getNode()}else{var y=e.popFront(),g=void 0;if(a.isCompleteForChild(f)){u=t.getServerCache().getNode();var m=n.calcEventCacheAfterServerOverwrite(e,a.getNode(),u);g=null!=m?a.getNode().getImmediateChild(f).updateChild(y,m):a.getNode().getImmediateChild(f)}else g=n.calcCompleteChild(f,t.getServerCache());s=null!=g?this.filter_.updateChild(a.getNode(),f,g,y,r,i):a.getNode()}}return t.updateEventSnap(s,a.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,a){var s,u=t.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var h=u.getNode().updateChild(e,n);s=c.updateFullNode(u.getNode(),h,null)}else{var l=e.getFront();if(!u.isCompleteForPath(e)&&e.getLength()>1)return t;var p=e.popFront(),f=u.getNode().getImmediateChild(l).updateChild(p,n);s=".priority"===l?c.updatePriority(u.getNode(),f):c.updateChild(u.getNode(),l,f,p,Ie,null)}var d=t.updateServerSnap(s,u.isFullyInitialized()||e.isEmpty(),c.filtersNodes()),v=new Te(r,d,i);return this.generateEventCacheAfterServerEvent_(d,e,r,v,a)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var a,s,u=t.getEventCache(),c=new Te(r,t,i);if(e.isEmpty())s=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),a=t.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var h=e.getFront();if(".priority"===h)s=this.filter_.updatePriority(t.getEventCache().getNode(),n),a=t.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var l=e.popFront(),p=u.getNode().getImmediateChild(h),f=void 0;if(l.isEmpty())f=n;else{var d=c.getCompleteChild(h);f=null!=d?".priority"===l.getBack()&&d.getChild(l.parent()).isEmpty()?d:d.updateChild(l,n):Ht.EMPTY_NODE}if(p.equals(f))a=t;else{var v=this.filter_.updateChild(u.getNode(),h,f,l,c,o);a=t.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,a){var s=this,u=e;return r.foreach((function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())&&(u=s.applyUserOverwrite_(u,h,c,i,o,a))})),r.foreach((function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())||(u=s.applyUserOverwrite_(u,h,c,i,o,a))})),u},t.prototype.applyMerge_=function(t,e){return e.foreach((function(e,n){t=t.updateChild(e,n)})),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,a){var s=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var u,c=t;u=e.isEmpty()?n:ve.Empty.setTree(e,n);var h=t.getServerCache().getNode();return u.children.inorderTraversal((function(e,n){if(h.hasChild(e)){var u=t.getServerCache().getNode().getImmediateChild(e),l=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new X(e),l,r,i,o,a)}})),u.children.inorderTraversal((function(e,n){var u=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!h.hasChild(e)&&!u){var l=t.getServerCache().getNode().getImmediateChild(e),p=s.applyMerge_(l,n);c=s.applyServerOverwrite_(c,new X(e),p,r,i,o,a)}})),c},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var a=t.getServerCache().isFiltered(),s=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,s.getNode().getChild(e),r,i,a,o);if(e.isEmpty()){var u=ve.Empty;return s.getNode().forEachChild(Nt,(function(t,e){u=u.set(new X(t),e)})),this.applyServerMerge_(t,e,u,r,i,a,o)}return t}var c=ve.Empty;return n.foreach((function(t,n){var r=e.child(t);s.isCompleteForPath(r)&&(c=c.set(t,s.getNode().getChild(r)))})),this.applyServerMerge_(t,e,c,r,i,a,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,Ie,r)},t.prototype.revertUserWrite_=function(t,e,n,r,i){var a;if(null!=n.shadowingWrite(e))return t;var s=new Te(n,t,r),u=t.getEventCache().getNode(),c=void 0;if(e.isEmpty()||".priority"===e.getFront()){var h=void 0;if(t.getServerCache().isFullyInitialized())h=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var l=t.getServerCache().getNode();(0,o.hu)(l instanceof Ht,"serverChildren would be complete if leaf node"),h=n.calcCompleteEventChildren(l)}h=h,c=this.filter_.updateFullNode(u,h,i)}else{var p=e.getFront(),f=n.calcCompleteChild(p,t.getServerCache());null==f&&t.getServerCache().isCompleteForChild(p)&&(f=u.getImmediateChild(p)),(c=null!=f?this.filter_.updateChild(u,p,f,e.popFront(),s,i):t.getEventCache().getNode().hasChild(p)?this.filter_.updateChild(u,p,Ht.EMPTY_NODE,e.popFront(),s,i):u).isEmpty()&&t.getServerCache().isFullyInitialized()&&(a=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,a,i))}return a=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(X.Empty),t.updateEventSnap(c,a,this.filter_.filtersNodes())},t}(),Ae=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach((function(t){t.type===we.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(we.childMovedChange(t.childName,t.snapshotNode))})),this.generateEventsForType_(i,we.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,we.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,we.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,we.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,we.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,a=n.filter((function(t){return t.type===e}));a.sort(this.compareChanges_.bind(this)),a.forEach((function(e){var n=o.materializeSingleChange_(e,i);r.forEach((function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))}))}))},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type||(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_)),t},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw(0,o.g5)("Should only compare child_ events.");var n=new It(t.childName,t.snapshotNode),r=new It(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),Pe=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new Ee(n.getIndex()),i=n.getNodeFilter();this.processor_=new Ne(i);var o=e.getServerCache(),a=e.getEventCache(),s=r.updateFullNode(Ht.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Ht.EMPTY_NODE,a.getNode(),null),c=new _e(s,o.isFullyInitialized(),r.filtersNodes()),h=new _e(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new be(h,c),this.eventGenerator_=new Ae(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){(0,o.hu)(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach((function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)}))}if(t){for(var i=[],a=0;a<this.eventRegistrations_.length;++a){var s=this.eventRegistrations_[a];if(s.matches(t)){if(t.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(a+1));break}}else i.push(s)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===ce.MERGE&&null!==t.source.queryId&&((0,o.hu)(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),(0,o.hu)(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(i.viewCache),(0,o.hu)(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];return e.getNode().isLeafNode()||e.getNode().forEachChild(Rt,(function(t,e){n.push(we.childAddedChange(t,e))})),e.isFullyInitialized()&&n.push(we.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),ke=function(){function t(){this.views=new Map}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return(0,o.hu)(pe,"Reference.ts has not been loaded"),pe},set:function(t){(0,o.hu)(!pe,"__referenceConstructor has already been defined"),pe=t},enumerable:!1,configurable:!0}),t.prototype.isEmpty=function(){return 0===this.views.size},t.prototype.applyOperation=function(t,e,n){var r,a,s=t.source.queryId;if(null!==s){var u=this.views.get(s);return(0,o.hu)(null!=u,"SyncTree gave us an op for an invalid query."),u.applyOperation(t,e,n)}var c=[];try{for(var h=(0,i.XA)(this.views.values()),l=h.next();!l.done;l=h.next())u=l.value,c=c.concat(u.applyOperation(t,e,n))}catch(t){r={error:t}}finally{try{l&&!l.done&&(a=h.return)&&a.call(h)}finally{if(r)throw r.error}}return c},t.prototype.addEventRegistration=function(t,e,n,r,i){var o=t.queryIdentifier(),a=this.views.get(o);if(!a){var s=n.calcCompleteEventCache(i?r:null),u=!1;s?u=!0:r instanceof Ht?(s=n.calcCompleteEventChildren(r),u=!1):(s=Ht.EMPTY_NODE,u=!1);var c=new be(new _e(s,u,!1),new _e(r,i,!1));a=new Pe(t,c),this.views.set(o,a)}return a.addEventRegistration(e),a.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var o,a,s=e.queryIdentifier(),u=[],c=[],h=this.hasCompleteView();if("default"===s)try{for(var l=(0,i.XA)(this.views.entries()),p=l.next();!p.done;p=l.next()){var f=(0,i.CR)(p.value,2),d=f[0],v=f[1];c=c.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(d),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery()))}}catch(t){o={error:t}}finally{try{p&&!p.done&&(a=l.return)&&a.call(l)}finally{if(o)throw o.error}}else(v=this.views.get(s))&&(c=c.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(s),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery())));return h&&!this.hasCompleteView()&&u.push(new t.__referenceConstructor(e.repo,e.path)),{removed:u,events:c}},t.prototype.getQueryViews=function(){var t,e,n=[];try{for(var r=(0,i.XA)(this.views.values()),o=r.next();!o.done;o=r.next()){var a=o.value;a.getQuery().getQueryParams().loadsAllData()||n.push(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t.prototype.getCompleteServerCache=function(t){var e,n,r=null;try{for(var o=(0,i.XA)(this.views.values()),a=o.next();!a.done;a=o.next()){var s=a.value;r=r||s.getCompleteServerCache(t)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return r},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return this.views.get(e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){var t,e;try{for(var n=(0,i.XA)(this.views.values()),r=n.next();!r.done;r=n.next()){var o=r.value;if(o.getQuery().getQueryParams().loadsAllData())return o}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}return null},t}(),Re=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ve(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,a=X.relativePath(i,e);return o=o.updateChild(a,n),new t(this.writeTree_.set(i,o))}var s=new ve(n);return new t(this.writeTree_.setTree(e,s))},t.prototype.addWrites=function(t,e){var n=this;return x(e,(function(e,r){n=n.addWrite(t.child(e),r)})),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ve.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(X.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(Rt,(function(e,n){t.push(new It(e,n))})):this.writeTree_.children.inorderTraversal((function(e,n){null!=n.value&&t.push(new It(e,n.value))})),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ve(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(t){return De(X.Empty,this.writeTree_,t)},t.Empty=new t(new ve(null)),t}();function De(t,e,n){if(null!=e.value)return n.updateChild(t,e.value);var r=null;return e.children.inorderTraversal((function(e,i){".priority"===e?((0,o.hu)(null!==i.value,"Priority writes must always be leaf nodes"),r=i.value):n=De(t.child(e),i,n)})),n.getChild(t).isEmpty()||null===r||(n=n.updateChild(t.child(".priority"),r)),n}var Oe=function(){function t(){this.visibleWrites_=Re.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new xe(t,this)},t.prototype.addOverwrite=function(t,e,n,r){(0,o.hu)(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){(0,o.hu)(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex((function(e){return e.writeId===t}));(0,o.hu)(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,a=!1,s=this.allWrites_.length-1;i&&s>=0;){var u=this.allWrites_[s];u.visible&&(s>=n&&this.recordContainsPath_(u,r.path)?i=!1:r.path.contains(u.path)&&(a=!0)),s--}return!!i&&(a?(this.resetTree_(),!0):(r.snap?this.visibleWrites_=this.visibleWrites_.removeWrite(r.path):x(r.children,(function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})),!0))},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(X.Empty)){var a=t.layerTree_(this.allWrites_,(function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))}),e);return c=n||Ht.EMPTY_NODE,a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(e);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(e);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(X.Empty)){var c=n||Ht.EMPTY_NODE;return u.apply(c)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=Ht.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(Rt,(function(t,e){n=n.updateImmediateChild(t,e)})),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(Rt,(function(t,e){var r=i.childCompoundWrite(new X(t)).apply(e);n=n.updateImmediateChild(t,r)})),i.getCompleteChildren().forEach((function(t){n=n.updateImmediateChild(t.name,t.node)})),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach((function(t){n=n.updateImmediateChild(t.name,t.node)})),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){(0,o.hu)(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=t.child(e);if(this.visibleWrites_.hasCompleteWrite(i))return null;var a=this.visibleWrites_.childCompoundWrite(i);return a.isEmpty()?r.getChild(e):a.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(t),u=s.getCompleteNode(X.Empty);if(null!=u)a=u;else{if(null==e)return[];a=s.apply(e)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],h=o.getCompare(),l=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),p=l.getNext();p&&c.length<r;)0!==h(p,n)&&c.push(p),p=l.getNext();return c},t.prototype.recordContainsPath_=function(t,e){if(t.snap)return t.path.contains(e);for(var n in t.children)if(t.children.hasOwnProperty(n)&&t.path.child(n).contains(e))return!0;return!1},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,X.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=Re.Empty,i=0;i<t.length;++i){var a=t[i];if(e(a)){var s=a.path,u=void 0;if(a.snap)n.contains(s)?(u=X.relativePath(n,s),r=r.addWrite(u,a.snap)):s.contains(n)&&(u=X.relativePath(s,n),r=r.addWrite(X.Empty,a.snap.getChild(u)));else{if(!a.children)throw(0,o.g5)("WriteRecord should have .snap or .children");if(n.contains(s))u=X.relativePath(n,s),r=r.addWrites(u,a.children);else if(s.contains(n))if((u=X.relativePath(s,n)).isEmpty())r=r.addWrites(X.Empty,a.children);else{var c=(0,o.DV)(a.children,u.getFront());if(c){var h=c.getChild(u.popFront());r=r.addWrite(X.Empty,h)}}}}}return r},t}(),xe=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Le=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ve.Empty,this.pendingWriteTree_=new Oe,this.tagToQueryMap=new Map,this.queryToTagMap=new Map}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new ge(fe.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ve.fromObject(e);return this.applyOperationToSyncPoints_(new me(fe.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ve.Empty;return null!=n.snap?r=r.set(X.Empty,!0):x(n.children,(function(t,e){r=r.set(new X(t),e)})),this.applyOperationToSyncPoints_(new de(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new ge(fe.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ve.fromObject(e);return this.applyOperationToSyncPoints_(new me(fe.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new ye(fe.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=X.relativePath(a,e),c=new ge(fe.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=X.relativePath(a,e),c=ve.fromObject(n),h=new me(fe.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,h)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,a=i.queryId,s=X.relativePath(o,e),u=new ye(fe.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,i=null,a=!1;this.syncPointTree_.foreachOnPath(r,(function(t,e){var n=X.relativePath(t,r);i=i||e.getCompleteServerCache(n),a=a||e.hasCompleteView()}));var s,u=this.syncPointTree_.get(r);u?(a=a||u.hasCompleteView(),i=i||u.getCompleteServerCache(X.Empty)):(u=new ke,this.syncPointTree_=this.syncPointTree_.set(r,u)),null!=i?s=!0:(s=!1,i=Ht.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild((function(t,e){var n=e.getCompleteServerCache(X.Empty);n&&(i=i.updateImmediateChild(t,n))})));var c=u.viewExistsForQuery(e);if(!c&&!e.getQueryParams().loadsAllData()){var h=t.makeQueryKey_(e);(0,o.hu)(!this.queryToTagMap.has(h),"View does not exist, but we have a tag");var l=t.getNextQueryTag_();this.queryToTagMap.set(h,l),this.tagToQueryMap.set(l,h)}var p=this.pendingWriteTree_.childWrites(r),f=u.addEventRegistration(e,n,p,i,s);if(!c&&!a){var d=u.viewForQuery(e);f=f.concat(this.setupListener_(e,d))}return f},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===e.queryIdentifier()||a.viewExistsForQuery(e))){var u=a.removeEventRegistration(e,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var h=-1!==c.findIndex((function(t){return t.getQueryParams().loadsAllData()})),l=this.syncPointTree_.findOnPath(o,(function(t,e){return e.hasCompleteView()}));if(h&&!l){var p=this.syncPointTree_.subtree(o);if(!p.isEmpty())for(var f=this.collectDistinctViewsForSubTree_(p),d=0;d<f.length;++d){var v=f[d],y=v.getQuery(),g=this.createListenerForView_(v);this.listenProvider_.startListening(t.queryForListening_(y),this.tagForQuery_(y),g.hashFn,g.onComplete)}}!l&&c.length>0&&!r&&(h?this.listenProvider_.stopListening(t.queryForListening_(e),null):c.forEach((function(e){var n=i.queryToTagMap.get(t.makeQueryKey_(e));i.listenProvider_.stopListening(t.queryForListening_(e),n)}))),this.removeTags_(c)}return s},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,(function(e,n){var r=X.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i}));return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold((function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),x(n,(function(t,e){r=r.concat(e)})),r}))},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap.get(i);this.queryToTagMap.delete(i),this.tagToQueryMap.delete(o)}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,i=this.tagForQuery_(e),a=this.createListenerForView_(n),s=this.listenProvider_.startListening(t.queryForListening_(e),i,a.hashFn,a.onComplete),u=this.syncPointTree_.subtree(r);if(i)(0,o.hu)(!u.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold((function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map((function(t){return t.getQuery()})))),x(n,(function(t,e){r=r.concat(e)})),r})),h=0;h<c.length;++h){var l=c[h];this.listenProvider_.stopListening(t.queryForListening_(l),this.tagForQuery_(l))}return s},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||Ht.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===t?n="Client doesn't have permission to access the desired data.":"unavailable"===t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return(0,o.hu)(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new X(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap.get(t)},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return this.queryToTagMap.get(n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);(0,o.hu)(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(X.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(X.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(X.Empty));var o=[],a=t.path.getFront(),s=t.operationForChild(a),u=e.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,h=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,h))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(X.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(X.Empty));var a=[];return e.children.inorderTraversal((function(e,o){var s=n?n.getImmediateChild(e):null,u=r.child(e),c=t.operationForChild(e);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))})),o&&(a=a.concat(o.applyOperation(t,r,n))),a},t.nextQueryTag_=1,t}(),Fe=function(){function t(){this.rootNode_=Ht.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),Me=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),(0,o.r3)(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return(0,o.p$)(this.counters_)},t}(),je=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Me),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),Ue=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=(0,i.pi)({},t);return this.last_&&x(this.last_,(function(t,n){e[t]=e[t]-n})),this.last_=t,e},t}(),Ve=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Ue(t);var n=1e4+2e4*Math.random();Y(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;x(e,(function(e,i){i>0&&(0,o.r3)(t.statsToReport_,e)&&(n[e]=i,r=!0)})),r&&this.server_.reportStats(n),Y(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),We=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new qe(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_((function(e){return e.equals(t)}))},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_((function(e){return e.contains(t)||t.contains(e)}))},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];r&&(t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1)}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),qe=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();m&&w("event: "+e.toString()),z(n)}}},t.prototype.getPath=function(){return this.path_},t}(),He=function(){function t(t){this.allowedEvents_=t,this.listeners_={},(0,o.hu)(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=(0,i.fl)(this.listeners_[t]),o=0;o<r.length;o++)r[o].callback.apply(r[o].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){(0,o.hu)(this.allowedEvents_.find((function(e){return e===t})),"Unknown event: "+t)},t}(),Be=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,(function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))}),!1),r}return(0,i.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(He),Qe=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||(0,o.uI)()||(window.addEventListener("online",(function(){e.online_||(e.online_=!0,e.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){e.online_&&(e.online_=!1,e.trigger("online",!1))}),!1)),e}return(0,i.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(He),Ke=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&z((function(){n.onMessage_(t[e])}))},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum]&&"break"!==r(););},t}(),Ge="start",ze="close",Ye=function(){function t(t,e,n,r,i){this.connId=t,this.repoInfo=e,this.applicationId=n,this.transportSessionId=r,this.lastSessionId=i,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=E(t),this.stats_=je.getCollection(e),this.urlFn=function(t){return e.connectionURL(tt,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new Ke(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(t){if((0,o.Yr)()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new Xe((function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,i.CR)(t,5),o=r[0],a=r[1],s=r[2];if(r[3],r[4],n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,o===Ge)n.id=a,n.password=s;else{if(o!==ze)throw new Error("Unrecognized command received: "+o);a?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(a,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,i.CR)(t,2),o=r[0],a=r[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(o,a)}),(function(){n.onClosed_()}),n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),n.applicationId&&(t.p=n.applicationId),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf($)&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,(function(){}))}}))},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return!((0,o.Yr)()||!t.forceAllow_&&(t.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=(0,o.h$)(e),r=O(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!(0,o.Yr)()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=(0,o.Pz)(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),Xe=function(){function t(e,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,(0,o.Yr)())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=v(),window["pLPCommand"+this.uniqueCallbackIdentifier]=e,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var a="";this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length)&&(a='<script>document.domain="'+document.domain+'";<\/script>');var s="<html><body>"+a+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(s),this.myIFrame.doc.close()}catch(t){w("frame writing exception"),t.stack&&w(t.stack),w(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||w("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var t=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==t.myIFrame&&(document.body.removeChild(t.myIFrame),t.myIFrame=null)}),Math.floor(0)));var e=this.onDisconnect;e&&(this.onDisconnect=null,e())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0&&this.pendingSegs[0].d.length+30+n.length<=1870;){var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e);var r=function(){n.outstandingRequests.delete(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,(function(){clearTimeout(i),r()}))},t.prototype.addTag=function(t,e){var n=this;(0,o.Yr)()?this.doNodeLongPoll(t,e):setTimeout((function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){w("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}}),Math.floor(1))},t}(),Je="";function $e(t){Je=t}var Ze=null;"undefined"!=typeof MozWebSocket?Ze=MozWebSocket:"undefined"!=typeof WebSocket&&(Ze=WebSocket);var tn=function(){function t(e,n,r,i,o){this.connId=e,this.applicationId=r,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=E(this.connId),this.stats_=je.getCollection(n),this.connURL=t.connectionURL_(n,i,o),this.nodeAdmin=n.nodeAdmin}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!(0,o.Yr)()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf($)&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL(Z,r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,p.set("previous_websocket_failure",!0);try{if((0,o.Yr)()){var r=this.nodeAdmin?"AdminNode":"Node",i={headers:{"User-Agent":"Firebase/5/"+Je+"/"+process.platform+"/"+r,"X-Firebase-GMPID":this.applicationId||""}},a=process.env,s=0===this.connURL.indexOf("wss://")?a.HTTPS_PROXY||a.https_proxy:a.HTTP_PROXY||a.http_proxy;s&&(i.proxy={origin:s}),this.mySock=new Ze(this.connURL,[],i)}else i={headers:{"X-Firebase-GMPID":this.applicationId||""}},this.mySock=new Ze(this.connURL,[],i)}catch(t){this.log_("Error instantiating WebSocket.");var u=t.message||t.data;return u&&this.log_(u),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Ze&&!t.forceDisallow_},t.previouslyFailed=function(){return p.isInMemoryStorage||!0===p.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){p.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length===this.totalFrames){var e=this.frames.join("");this.frames=null;var n=(0,o.cI)(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if((0,o.hu)(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=O(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()}),Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),en=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[Ye,tn]},enumerable:!1,configurable:!0}),t.prototype.initTransports_=function(e){var n,r,o=tn&&tn.isAvailable(),a=o&&!tn.previouslyFailed();if(e.webSocketOnly&&(o||T("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),a=!0),a)this.transports_=[tn];else{var s=this.transports_=[];try{for(var u=(0,i.XA)(t.ALL_TRANSPORTS),c=u.next();!c.done;c=u.next()){var h=c.value;h&&h.isAvailable()&&s.push(h)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),nn=function(){function t(t,e,n,r,i,o,a,s){this.id=t,this.repoInfo_=e,this.applicationId_=n,this.onMessage_=r,this.onReady_=i,this.onDisconnect_=o,this.onKill_=a,this.lastSessionId=s,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=E("c:"+this.id+":"),this.transportManager_=new en(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){t.conn_&&t.conn_.open(n,r)}),Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=Y((function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))}),Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!==e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=R("t",t),n=R("d",t);if("c"===e)this.onSecondaryControl_(n);else{if("d"!==e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=R("t",t),n=R("d",t);"c"===e?this.onControl_(n):"d"===e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=R("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?C("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):C("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&T("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),Y((function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())}),Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):Y((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(p.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),rn=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),on=1e3,an=function(t){function e(n,r,i,a,s,u,c){var h=t.call(this)||this;if(h.repoInfo_=n,h.applicationId_=r,h.onDataUpdate_=i,h.onConnectStatus_=a,h.onServerInfoUpdate_=s,h.authTokenProvider_=u,h.authOverride_=c,h.id=e.nextPersistentConnectionId_++,h.log_=E("p:"+h.id+":"),h.interruptReasons_={},h.listens=new Map,h.outstandingPuts_=[],h.outstandingGets_=[],h.outstandingPutCount_=0,h.outstandingGetCount_=0,h.onDisconnectRequestQueue_=[],h.connected_=!1,h.reconnectDelay_=on,h.maxReconnectDelay_=3e5,h.securityDebugCallback_=null,h.lastSessionId=null,h.establishConnectionTimer_=null,h.visible_=!1,h.requestCBHash_={},h.requestNumber_=0,h.realtime_=null,h.authToken_=null,h.forceTokenRefresh_=!1,h.invalidAuthTokenCount_=0,h.firstConnection_=!0,h.lastConnectionAttemptTime_=null,h.lastConnectionEstablishedTime_=null,c&&!(0,o.Yr)())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return h.scheduleConnect_(0),Be.getInstance().on("visible",h.onVisible_,h),-1===n.host.indexOf("fblocal")&&Qe.getInstance().on("online",h.onOnline_,h),h}return(0,i.ZT)(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,i={r:r,a:t,b:e};this.log_((0,o.Pz)(i)),(0,o.hu)(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},e.prototype.get=function(t){var e=this,n=new o.BH,r={p:t.path.toString(),q:t.queryObject()},i={action:"g",request:r,onComplete:function(t){var i=t.d;"ok"===t.s?(e.onDataUpdate_(r.p,i,!1,null),n.resolve(i)):n.reject(i)}};this.outstandingGets_.push(i),this.outstandingGetCount_++;var a=this.outstandingGets_.length-1;return this.connected_||setTimeout((function(){var t=e.outstandingGets_[a];void 0!==t&&i===t&&(delete e.outstandingGets_[a],e.outstandingGetCount_--,0===e.outstandingGetCount_&&(e.outstandingGets_=[]),e.log_("get "+a+" timed out on connection"),n.reject(new Error("Client is offline.")))}),3e3),this.connected_&&this.sendGet_(a),n.promise},e.prototype.listen=function(t,e,n,r){var i=t.queryIdentifier(),a=t.path.toString();this.log_("Listen called for "+a+" "+i),this.listens.has(a)||this.listens.set(a,new Map),(0,o.hu)(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),(0,o.hu)(!this.listens.get(a).has(i),"listen() called twice for same path/queryId.");var s={onComplete:r,hashFn:e,query:t,tag:n};this.listens.get(a).set(i,s),this.connected_&&this.sendListen_(s)},e.prototype.sendGet_=function(t){var e=this,n=this.outstandingGets_[t];this.sendRequest("g",n.request,(function(r){delete e.outstandingGets_[t],e.outstandingGetCount_--,0===e.outstandingGetCount_&&(e.outstandingGets_=[]),n.onComplete&&n.onComplete(r)}))},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};t.tag&&(a.q=r.queryObject(),a.t=t.tag),a.h=t.hashFn(),this.sendRequest("q",a,(function(a){var s=a.d,u=a.s;e.warnOnListenWarnings_(s,r),(n.listens.get(i)&&n.listens.get(i).get(o))===t&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),t.onComplete&&t.onComplete(u,s))}))},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&(0,o.r3)(t,"w")){var n=(0,o.DV)(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',i=e.path.toString();T("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||(0,o.GJ)(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=(0,o.w9)(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,(function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))}))}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),(0,o.hu)(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,(function(t){r&&setTimeout((function(){r(t.s,t.d)}),Math.floor(0))}))},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,(function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)}))},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,(function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}}))}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+(0,o.Pz)(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):C("Unrecognized action received from server: "+(0,o.Pz)(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;(0,o.hu)(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){e.establishConnectionTimer_=null,e.establishConnection_()}),Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){this.visible_?this.lastConnectionEstablishedTime_&&((new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=on),this.lastConnectionEstablishedTime_=null):(this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime());var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){var t=this;if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var n=this.onDataMessage_.bind(this),r=this.onReady_.bind(this),i=this.onRealtimeDisconnect_.bind(this),a=this.id+":"+e.nextConnectionId_++,s=this,u=this.lastSessionId,c=!1,h=null,l=function(){h?h.close():(c=!0,i())};this.realtime_={close:l,sendRequest:function(t){(0,o.hu)(h,"sendRequest call when we're not connected not allowed."),h.sendRequest(t)}};var p=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(p).then((function(t){c?w("getToken() completed but was canceled"):(w("getToken() completed. Creating connection."),s.authToken_=t&&t.accessToken,h=new nn(a,s.repoInfo_,s.applicationId_,n,r,i,(function(t){T(t+" ("+s.repoInfo_.toString()+")"),s.interrupt("server_kill")}),u))})).then(null,(function(e){s.log_("Failed to get token: "+e),c||(t.repoInfo_.nodeAdmin&&T(e),l())}))}},e.prototype.interrupt=function(t){w("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){w("Resuming connection for reason: "+t),delete this.interruptReasons_[t],(0,o.xb)(this.interruptReasons_)&&(this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map((function(t){return D(t)})).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new X(t).toString();if(this.listens.has(r)){var i=this.listens.get(r);n=i.get(e),i.delete(e),0===i.size&&this.listens.delete(r)}else n=void 0;return n},e.prototype.onAuthRevoked_=function(t,e){w("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t,e,n,r;this.tryAuth();try{for(var o=(0,i.XA)(this.listens.values()),a=o.next();!a.done;a=o.next()){var s=a.value;try{for(var u=(n=void 0,(0,i.XA)(s.values())),c=u.next();!c.done;c=u.next()){var h=c.value;this.sendListen_(h)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}for(var l=0;l<this.outstandingPuts_.length;l++)this.outstandingPuts_[l]&&this.sendPut_(l);for(;this.onDisconnectRequestQueue_.length;){var p=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(p.action,p.pathString,p.data,p.onComplete)}for(l=0;l<this.outstandingGets_.length;l++)this.outstandingGets_[l]&&this.sendGet_(l)},e.prototype.sendConnectStats_=function(){var t={},e="js";(0,o.Yr)()&&(e=this.repoInfo_.nodeAdmin?"admin_node":"node"),t["sdk."+e+"."+Je.replace(/\./g,"-")]=1,(0,o.uI)()?t["framework.cordova"]=1:(0,o.b$)()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=Qe.getInstance().currentlyOnline();return(0,o.xb)(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(rn),sn=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=E("p:rest:"),i.listens_={},i}return(0,i.ZT)(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:((0,o.hu)(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,i){var a=this,s=t.path.toString();this.log_("Listen called for "+s+" "+t.queryIdentifier());var u=e.getListenId_(t,r),c={};this.listens_[u]=c;var h=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(s+".json",h,(function(t,e){var n=e;404===t&&(n=null,t=null),null===t&&a.onDataUpdate_(s,n,!1,r),(0,o.DV)(a.listens_,u)===c&&i(t?401===t?"permission_denied":"rest_error:"+t:"ok",null)}))},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.get=function(t){var e=this,n=t.getQueryParams().toRestQueryStringParameters(),r=t.path.toString(),i=new o.BH;return this.restRequest_(r+".json",n,(function(t,n){var o=n;404===t&&(o=null,t=null),null===t?(e.onDataUpdate_(r,o,!1,null),i.resolve(o)):i.reject(new Error(o))})),i.promise},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then((function(i){var a=i&&i.accessToken;a&&(e.auth=a);var s=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?ns="+r.repoInfo_.namespace+(0,o.xO)(e);r.log_("Sending REST request for "+s);var u=new XMLHttpRequest;u.onreadystatechange=function(){if(n&&4===u.readyState){r.log_("REST Response for "+s+" received. status:",u.status,"response:",u.responseText);var t=null;if(u.status>=200&&u.status<300){try{t=(0,o.cI)(u.responseText)}catch(t){T("Failed to parse JSON response for "+s+": "+u.responseText)}n(null,t)}else 401!==u.status&&404!==u.status&&T("Got unsuccessful REST response for "+s+" Status: "+u.status),n(u.status);n=null}},u.open("GET",s,!0),u.send()}))},e}(rn),un="repo_interrupt",cn=function(){function t(t,e,n,r){this.repoInfo_=t,this.forceRestClient_=e,this.app=n,this.authTokenProvider_=r,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new We,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new he,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}return t.prototype.start=function(){var t=this;if(this.stats_=je.getCollection(this.repoInfo_),this.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)this.server_=new sn(this.repoInfo_,this.onDataUpdate_.bind(this),this.authTokenProvider_),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var e=this.app.options.databaseAuthVariableOverride;if(null!=e){if("object"!=typeof e)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{(0,o.Pz)(e)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new an(this.repoInfo_,this.app.options.appId,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),this.authTokenProvider_,e),this.server_=this.persistentConnection_}this.authTokenProvider_.addTokenChangeListener((function(e){t.server_.refreshAuthToken(e)})),this.statsReporter_=je.getOrCreateReporter(this.repoInfo_,(function(){return new Ve(t.stats_,t.server_)})),this.transactionsInit_(),this.infoData_=new Fe,this.infoSyncTree_=new Le({startListening:function(e,n,r,i){var o=[],a=t.infoData_.getNode(e.path);return a.isEmpty()||(o=t.infoSyncTree_.applyServerOverwrite(e.path,a),setTimeout((function(){i("ok")}),0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Le({startListening:function(e,n,r,i){return t.server_.listen(e,r,n,(function(n,r){var o=i(n,r);t.eventQueue_.raiseEventsForChangedPath(e.path,o)})),[]},stopListening:function(e,n){t.server_.unlisten(e,n)}})},t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new X(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return(t=(t={timestamp:this.serverTime()})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var i=new X(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var a=[];if(r)if(n){var s=(0,o.UI)(e,(function(t){return Qt(t)}));a=this.serverSyncTree_.applyTaggedQueryMerge(i,s,r)}else{var u=Qt(e);a=this.serverSyncTree_.applyTaggedQueryOverwrite(i,u,r)}else if(n){var c=(0,o.UI)(e,(function(t){return Qt(t)}));a=this.serverSyncTree_.applyServerMerge(i,c)}else{var h=Qt(e);a=this.serverSyncTree_.applyServerOverwrite(i,h)}var l=i;a.length>0&&(l=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(l,a)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;x(t,(function(t,n){e.updateInfo_(t,n)}))},t.prototype.updateInfo_=function(t,e){var n=new X("/.info/"+t),r=Qt(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.getValue=function(t){var e=this;return this.server_.get(t).then((function(n){var r=Qt(n),i=e.serverSyncTree_.applyServerOverwrite(t.path,r);return e.eventQueue_.raiseEventsAtPath(t.path,i),Promise.resolve(new Yt(r,t.getRef(),t.getQueryParams().getIndex()))}),(function(n){e.log_("get for query "+(0,o.Pz)(t)+" falling back to cache after error: "+n);var r=e.serverSyncTree_.calcCompleteEventCache(t.path);return r.isEmpty()?Promise.reject(new Error(n)):Promise.resolve(new Yt(r,t.getRef(),t.getQueryParams().getIndex()))}))},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),a=Qt(e,n),s=this.serverSyncTree_.calcCompleteEventCache(t),u=se(a,s,o),c=this.getNextWriteId_(),h=this.serverSyncTree_.applyUserOverwrite(t,u,c,!0);this.eventQueue_.queueEvents(h),this.server_.put(t.toString(),a.val(!0),(function(e,n){var o="ok"===e;o||T("set at "+t+" failed: "+e);var a=i.serverSyncTree_.ackUserWrite(c,!o);i.eventQueue_.raiseEventsForChangedPath(t,a),i.callOnCompleteCallback(r,e,n)}));var l=this.abortTransactions_(t);this.rerunTransactions_(l),this.eventQueue_.raiseEventsForChangedPath(l,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var i=!0,o=this.generateServerValues(),a={};if(x(e,(function(e,n){i=!1,a[e]=ae(t.child(e),Qt(n),r.serverSyncTree_,o)})),i)w("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var s=this.getNextWriteId_(),u=this.serverSyncTree_.applyUserMerge(t,a,s);this.eventQueue_.queueEvents(u),this.server_.merge(t.toString(),e,(function(e,i){var o="ok"===e;o||T("update at "+t+" failed: "+e);var a=r.serverSyncTree_.ackUserWrite(s,!o),u=a.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(u,a),r.callOnCompleteCallback(n,e,i)})),x(e,(function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)})),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=new he;this.onDisconnect_.forEachTree(X.Empty,(function(r,i){var o=ae(r,i,t.serverSyncTree_,e);n.remember(r,o)}));var r=[];n.forEachTree(X.Empty,(function(e,n){r=r.concat(t.serverSyncTree_.applyServerOverwrite(e,n));var i=t.abortTransactions_(e);t.rerunTransactions_(i)})),this.onDisconnect_=new he,this.eventQueue_.raiseEventsForChangedPath(X.Empty,r)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),(function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)}))},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=Qt(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),(function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)}))},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=Qt(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),(function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)}))},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if((0,o.xb)(e))return w("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,(function(i,o){"ok"===i&&x(e,(function(e,n){var i=Qt(n);r.onDisconnect_.remember(t.child(e),i)})),r.callOnCompleteCallback(n,i,o)}))},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt(un)},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume(un)},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new Ue(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce((function(t,e){return Math.max(e.length,t)}),0);x(e,(function(t,e){for(var r=t,i=t.length;i<n+2;i++)r+=" ";console.log(r+e)}))}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),w.apply(void 0,(0,i.fl)([n],t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&z((function(){if("ok"===e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}}))},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new wn(this))},enumerable:!1,configurable:!0}),t}(),hn=function(){function t(e){this.indexedFilter_=new Ee(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new It(e,n))||(n=Ht.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=Ht.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(Ht.EMPTY_NODE);var i=this;return e.forEachChild(Rt,(function(t,e){i.matches(new It(t,e))||(r=r.updateImmediateChild(t,Ht.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),ln=function(){function t(t){this.rangedFilter_=new hn(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new It(e,n))||(n=Ht.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=Ht.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=Ht.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(Ht.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;if(i=void 0,this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var h=this.index_.getCompare();c=function(t,e){return h(e,t)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var l=!1;i.hasNext();)a=i.getNext(),!l&&c(s,a)<=0&&(l=!0),l&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Ht.EMPTY_NODE)}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,i){var a;if(this.reverse_){var s=this.index_.getCompare();a=function(t,e){return s(e,t)}}else a=this.index_.getCompare();var u=t;(0,o.hu)(u.numChildren()===this.limit_,"");var c=new It(e,n),h=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),l=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var p=u.getImmediateChild(e),f=r.getChildAfterChild(this.index_,h,this.reverse_);null!=f&&(f.name===e||u.hasChild(f.name));)f=r.getChildAfterChild(this.index_,f,this.reverse_);var d=null==f?1:a(f,c);if(l&&!n.isEmpty()&&d>=0)return null!=i&&i.trackChildChange(we.childChangedChange(e,n,p)),u.updateImmediateChild(e,n);null!=i&&i.trackChildChange(we.childRemovedChange(e,p));var v=u.updateImmediateChild(e,Ht.EMPTY_NODE);return null!=f&&this.rangedFilter_.matches(f)?(null!=i&&i.trackChildChange(we.childAddedChange(f.name,f.node)),v.updateImmediateChild(f.name,f.node)):v}return n.isEmpty()?t:l&&a(h,c)>=0?(null!=i&&(i.trackChildChange(we.childRemovedChange(h.name,h.node)),i.trackChildChange(we.childAddedChange(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(h.name,Ht.EMPTY_NODE)):t},t}(),pn=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Rt}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:N},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:A},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return(0,o.hu)(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==Rt&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===Rt},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new Ee(this.getIndex()):this.hasLimit()?new ln(this):new hn(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()||(this.index_===Rt?e=n.PRIORITY_INDEX:this.index_===Gt?e=n.VALUE_INDEX:this.index_===Nt?e=n.KEY_INDEX:((0,o.hu)(this.index_ instanceof zt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=(0,o.Pz)(e),this.startSet_&&(r[n.START_AT]=(0,o.Pz)(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+(0,o.Pz)(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=(0,o.Pz)(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+(0,o.Pz)(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_)),r},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),fn=function(t){function e(e,n){if(!(e instanceof cn))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,pn.DEFAULT,!1)||this}return(0,i.ZT)(e,t),e.prototype.getKey=function(){return(0,o.Dv)("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return(0,o.Dv)("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof X||(null===this.path.getFront()?gt("Reference.child",1,t,!1):yt("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){(0,o.Dv)("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){(0,o.Dv)("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){(0,o.Dv)("Reference.set",1,2,arguments.length),mt("Reference.set",this.path),ht("Reference.set",1,t,this.path,!1),(0,o.Wj)("Reference.set",2,e,!0);var n=new o.BH;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if((0,o.Dv)("Reference.update",1,2,arguments.length),mt("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}pt("Reference.update",1,t,this.path,!1),(0,o.Wj)("Reference.update",2,e,!0);var i=new o.BH;return this.repo.update(this.path,t,i.wrapCallback(e)),i.promise},e.prototype.setWithPriority=function(t,e,n){if((0,o.Dv)("Reference.setWithPriority",2,3,arguments.length),mt("Reference.setWithPriority",this.path),ht("Reference.setWithPriority",1,t,this.path,!1),ft("Reference.setWithPriority",2,e,!1),(0,o.Wj)("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new o.BH;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return(0,o.Dv)("Reference.remove",0,1,arguments.length),mt("Reference.remove",this.path),(0,o.Wj)("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if((0,o.Dv)("Reference.transaction",1,3,arguments.length),mt("Reference.transaction",this.path),(0,o.Wj)("Reference.transaction",1,t,!1),(0,o.Wj)("Reference.transaction",2,e,!0),bt("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new o.BH;"function"==typeof e&&r.promise.catch((function(){}));var i=function(t,n,i){t?r.reject(t):r.resolve(new Et(n,i)),"function"==typeof e&&e(t,n,i)};return this.repo.startTransaction(this.path,t,i,n),r.promise},e.prototype.setPriority=function(t,e){(0,o.Dv)("Reference.setPriority",1,2,arguments.length),mt("Reference.setPriority",this.path),ft("Reference.setPriority",1,t,!1),(0,o.Wj)("Reference.setPriority",2,e,!0);var n=new o.BH;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){(0,o.Dv)("Reference.push",0,2,arguments.length),mt("Reference.push",this.path),ht("Reference.push",1,t,this.path,!0),(0,o.Wj)("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),i=Ct(r),a=this.child(i),s=this.child(i);return n=null!=t?a.set(t,e).then((function(){return s})):Promise.resolve(s),a.then=n.then.bind(n),a.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch((function(){})),a},e.prototype.onDisconnect=function(){return mt("Reference.onDisconnect",this.path),new wt(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!1,configurable:!0}),e}(te);te.__referenceConstructor=fn,ke.__referenceConstructor=fn;var dn,vn=function(){this.children={},this.childCount=0,this.value=null},yn=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new vn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n=e instanceof X?e:new X(e),r=this,i=n.getFront();null!==i;)r=new t(i,r,(0,o.DV)(r.node_.children,i)||new vn),i=(n=n.popFront()).getFront();return r},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){(0,o.hu)(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;x(this.node_.children,(function(r,i){e(new t(r,n,i))}))},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild((function(e){e.forEachDescendant(t,!0,n)})),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild((function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)}))},t.prototype.path=function(){return new X(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=(0,o.r3)(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(dn||(dn={})),cn.MAX_TRANSACTION_RETRIES_=25,cn.prototype.transactionsInit_=function(){this.transactionQueueTree_=new yn},cn.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var i=function(){},a=new fn(this,t);a.on("value",i);var s={path:t,update:e,onComplete:n,status:null,order:v(),applyLocally:r,retryCount:0,unwatcher:function(){a.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=this.getLatestState_(t);s.currentInputSnapshot=u;var c=s.update(u.val());if(void 0===c){if(s.unwatcher(),s.currentOutputSnapshotRaw=null,s.currentOutputSnapshotResolved=null,s.onComplete){var h=new Yt(s.currentInputSnapshot,new fn(this,s.path),Rt);s.onComplete(null,!1,h)}}else{lt("transaction failed: Data returned ",c,s.path),s.status=dn.RUN;var l=this.transactionQueueTree_.subTree(t),p=l.getValue()||[];p.push(s),l.setValue(p);var f=void 0;"object"==typeof c&&null!==c&&(0,o.r3)(c,".priority")?(f=(0,o.DV)(c,".priority"),(0,o.hu)(ct(f),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):f=(this.serverSyncTree_.calcCompleteEventCache(t)||Ht.EMPTY_NODE).getPriority().val(),f=f;var d=this.generateServerValues(),y=Qt(c,f),g=se(y,u,d);s.currentOutputSnapshotRaw=y,s.currentOutputSnapshotResolved=g,s.currentWriteId=this.getNextWriteId_();var m=this.serverSyncTree_.applyUserOverwrite(t,g,s.currentWriteId,s.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,m),this.sendReadyTransactions_()}},cn.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||Ht.EMPTY_NODE},cn.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);(0,o.hu)(n.length>0,"Sending zero length transaction queue"),n.every((function(t){return t.status===dn.RUN}))&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild((function(t){e.sendReadyTransactions_(t)}))},cn.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map((function(t){return t.currentWriteId})),i=this.getLatestState_(t,r),a=i,s=i.hash(),u=0;u<e.length;u++){var c=e[u];(0,o.hu)(c.status===dn.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=dn.SENT,c.retryCount++;var h=X.relativePath(t,c.path);a=a.updateChild(h,c.currentOutputSnapshotRaw)}var l=a.val(!0),p=t;this.server_.put(p.toString(),l,(function(r){n.log_("transaction put response",{path:p.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<e.length;a++){if(e[a].status=dn.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[a].currentWriteId)),e[a].onComplete){var s=e[a].currentOutputSnapshotResolved,u=new fn(n,e[a].path),c=new Yt(s,u,Rt);o.push(e[a].onComplete.bind(null,null,!0,c))}e[a].unwatcher()}for(n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i),a=0;a<o.length;a++)z(o[a])}else{if("datastale"===r)for(a=0;a<e.length;a++)e[a].status===dn.SENT_NEEDS_ABORT?e[a].status=dn.NEEDS_ABORT:e[a].status=dn.RUN;else for(T("transaction at "+p.toString()+" failed: "+r),a=0;a<e.length;a++)e[a].status=dn.NEEDS_ABORT,e[a].abortReason=r;n.rerunTransactions_(t)}}),s)},cn.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},cn.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n,r=[],i=[],a=t.filter((function(t){return t.status===dn.RUN})).map((function(t){return t.currentWriteId})),s=0;s<t.length;s++){var u=t[s],c=X.relativePath(e,u.path),h=!1,l=void 0;if((0,o.hu)(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),u.status===dn.NEEDS_ABORT)h=!0,l=u.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else if(u.status===dn.RUN)if(u.retryCount>=cn.MAX_TRANSACTION_RETRIES_)h=!0,l="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else{var p=this.getLatestState_(u.path,a);u.currentInputSnapshot=p;var f=t[s].update(p.val());if(void 0!==f){lt("transaction failed: Data returned ",f,u.path);var d=Qt(f);"object"==typeof f&&null!=f&&(0,o.r3)(f,".priority")||(d=d.updatePriority(p.getPriority()));var v=u.currentWriteId,y=this.generateServerValues(),g=se(d,p,y);u.currentOutputSnapshotRaw=d,u.currentOutputSnapshotResolved=g,u.currentWriteId=this.getNextWriteId_(),a.splice(a.indexOf(v),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(u.path,g,u.currentWriteId,u.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(v,!0))}else h=!0,l="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,i),i=[],h&&(t[s].status=dn.COMPLETED,n=t[s].unwatcher,setTimeout(n,Math.floor(0)),t[s].onComplete))if("nodata"===l){var m=new fn(this,t[s].path),_=t[s].currentInputSnapshot,b=new Yt(_,m,Rt);r.push(t[s].onComplete.bind(null,null,!1,b))}else r.push(t[s].onComplete.bind(null,new Error(l),!1,null))}for(this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_),s=0;s<r.length;s++)z(r[s]);this.sendReadyTransactions_()}},cn.prototype.getAncestorTransactionNode_=function(t){var e,n=this.transactionQueueTree_;for(e=t.getFront();null!==e&&null===n.getValue();)n=n.subTree(e),e=(t=t.popFront()).getFront();return n},cn.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort((function(t,e){return t.order-e.order})),e},cn.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild((function(t){n.aggregateTransactionQueuesForNode_(t,e)}))},cn.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==dn.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild((function(t){e.pruneCompletedTransactionsBelowNode_(t)}))},cn.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor((function(t){e.abortTransactionsOnNode_(t)})),this.abortTransactionsOnNode_(r),r.forEachDescendant((function(t){e.abortTransactionsOnNode_(t)})),n},cn.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],i=-1,a=0;a<e.length;a++)e[a].status===dn.SENT_NEEDS_ABORT||(e[a].status===dn.SENT?((0,o.hu)(i===a-1,"All SENT items should be at beginning of queue."),i=a,e[a].status=dn.SENT_NEEDS_ABORT,e[a].abortReason="set"):((0,o.hu)(e[a].status===dn.RUN,"Unexpected transaction status in abort"),e[a].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[a].currentWriteId,!0)),e[a].onComplete&&n.push(e[a].onComplete.bind(null,new Error("set"),!1,null))));for(-1===i?t.setValue(null):e.length=i+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r),a=0;a<n.length;a++)z(n[a])}};var gn,mn=function(){function t(t,e){var n=this;this.app_=t,this.authProvider_=e,this.auth_=null,this.auth_=e.getImmediate({optional:!0}),this.auth_||e.get().then((function(t){return n.auth_=t}))}return t.prototype.getToken=function(t){return this.auth_?this.auth_.getToken(t).catch((function(t){return t&&"auth/token-not-initialized"===t.code?(w("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})):Promise.resolve(null)},t.prototype.addTokenChangeListener=function(t){this.auth_?this.auth_.addAuthTokenListener(t):(setTimeout((function(){return t(null)}),0),this.authProvider_.get().then((function(e){return e.addAuthTokenListener(t)})))},t.prototype.removeTokenChangeListener=function(t){this.authProvider_.get().then((function(e){return e.removeAuthTokenListener(t)}))},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',T(t)},t}(),_n=function(){function t(){}return t.prototype.getToken=function(e){return Promise.resolve({accessToken:t.EMULATOR_AUTH_TOKEN})},t.prototype.addTokenChangeListener=function(e){e(t.EMULATOR_AUTH_TOKEN)},t.prototype.removeTokenChangeListener=function(t){},t.prototype.notifyForInvalidToken=function(){},t.EMULATOR_AUTH_TOKEN="owner",t}(),bn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return gn||(gn=new t),gn},t.prototype.interrupt=function(){var t,e,n,r;try{for(var o=(0,i.XA)(Object.keys(this.repos_)),a=o.next();!a.done;a=o.next()){var s=a.value;try{for(var u=(n=void 0,(0,i.XA)(Object.keys(this.repos_[s]))),c=u.next();!c.done;c=u.next()){var h=c.value;this.repos_[s][h].interrupt()}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}},t.prototype.resume=function(){var t,e,n,r;try{for(var o=(0,i.XA)(Object.keys(this.repos_)),a=o.next();!a.done;a=o.next()){var s=a.value;try{for(var u=(n=void 0,(0,i.XA)(Object.keys(this.repos_[s]))),c=u.next();!c.done;c=u.next()){var h=c.value;this.repos_[s][h].resume()}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}},t.prototype.applyEmulatorSettings=function(t,e,n){t.repoInfo_=new et(e+":"+n,!1,t.repoInfo_.namespace,t.repoInfo_.webSocketOnly,t.repoInfo_.nodeAdmin,t.repoInfo_.persistenceKey,t.repoInfo_.includeNamespaceInQueryParams),t.repoInfo_.nodeAdmin&&(t.authTokenProvider_=new _n)},t.prototype.databaseFromApp=function(t,e,n,r){var i=n||t.options.databaseURL;void 0===i&&(t.options.projectId||I("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),w("Using default host for project ",t.options.projectId),i=t.options.projectId+"-default-rtdb.firebaseio.com");var o,a=nt(i,r),s=a.repoInfo,u=void 0;"undefined"!=typeof process&&(u=process.env.FIREBASE_DATABASE_EMULATOR_HOST),u?(o=!0,i="http://"+u+"?ns="+s.namespace,s=(a=nt(i,r)).repoInfo):o=!a.repoInfo.secure;var c=r&&o?new _n:new mn(t,e);return _t("Invalid Firebase Database URL",1,a),a.path.isEmpty()||I("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(s,t,c).database},t.prototype.deleteRepo=function(t){var e=(0,o.DV)(this.repos_,t.app.name);e&&(0,o.DV)(e,t.key)===t||I("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.key]},t.prototype.createRepo=function(t,e,n){var r=(0,o.DV)(this.repos_,e.name);r||(r={},this.repos_[e.name]=r);var i=(0,o.DV)(r,t.toURLString());return i&&I("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),i=new cn(t,this.useRestClient_,e,n),r[t.toURLString()]=i,i},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),wn=function(){function t(t){var e=this;this.repoInternal_=t,this.instanceStarted_=!1,this.INTERNAL={delete:function(){return(0,i.mG)(e,void 0,void 0,(function(){return(0,i.Jh)(this,(function(t){return this.checkDeleted_("delete"),bn.getInstance().deleteRepo(this.repo_),this.repoInternal_=null,this.rootInternal_=null,[2]}))}))}},t instanceof cn||I("Don't call new Database() directly - please use firebase.database().")}return Object.defineProperty(t.prototype,"repo_",{get:function(){return this.instanceStarted_||(this.repoInternal_.start(),this.instanceStarted_=!0),this.repoInternal_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"root_",{get:function(){return this.rootInternal_||(this.rootInternal_=new fn(this.repo_,X.Empty)),this.rootInternal_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!1,configurable:!0}),t.prototype.useEmulator=function(t,e){this.checkDeleted_("useEmulator"),this.instanceStarted_?I("Cannot call useEmulator() after instance has already been initialized."):bn.getInstance().applyEmulatorSettings(this.repoInternal_,t,e)},t.prototype.ref=function(t){return this.checkDeleted_("ref"),(0,o.Dv)("database.ref",0,1,arguments.length),t instanceof fn?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),(0,o.Dv)(e,1,1,arguments.length);var n=nt(t,this.repo_.repoInfo_.nodeAdmin);_t(e,1,n);var r=n.repoInfo;return r.isCustomHost()||r.host===this.repo_.repoInfo_.host||I(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repoInternal_&&I("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){(0,o.Dv)("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){(0,o.Dv)("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"},increment:function(t){return{".sv":{increment:t}}}},t}(),En=Object.freeze({__proto__:null,forceLongPolling:function(){tn.forceDisallow(),Ye.forceAllow()},forceWebSockets:function(){Ye.forceDisallow()},isWebSocketsAvailable:function(){return tn.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)},initStandalone:function(t){var e=t.app,n=t.url,r=t.version,i=t.customAuthImpl,o=t.namespace,a=t.nodeAdmin,u=void 0!==a&&a;$e(r);var c=new s.zt("auth-internal",new s.H0("database-standalone"));return c.setComponent(new s.wA("auth-internal",(function(){return i}),"PRIVATE")),{instance:bn.getInstance().databaseFromApp(e,c,n,u),namespace:o}}}),Cn=an;an.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},an.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var In=nn,Tn=et,Sn=Object.freeze({__proto__:null,DataConnection:Cn,RealTimeConnection:In,hijackHash:function(t){var e=an.prototype.put;return an.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){an.prototype.put=e}},ConnectionTarget:Tn,queryIdentifier:function(t){return t.queryIdentifier()},forceRestClient:function(t){bn.getInstance().forceRestClient(t)}}),Nn=wn.ServerValue;!function(e){$e(e.SDK_VERSION);var n=e.INTERNAL.registerComponent(new s.wA("database",(function(t,e){var n=t.getProvider("app").getImmediate(),r=t.getProvider("auth-internal");return bn.getInstance().databaseFromApp(n,r,e)}),"PUBLIC").setServiceProps({Reference:fn,Query:te,Database:wn,DataSnapshot:Yt,enableLogging:b,INTERNAL:En,ServerValue:Nn,TEST_ACCESS:Sn}).setMultipleInstances(!0));e.registerVersion("@firebase/database","0.8.1"),(0,o.Yr)()&&(t.exports=n)}(r.Z)},594:function(t,e,n){function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}var i;n.d(e,{in:function(){return o},Yd:function(){return l},Ub:function(){return p},Am:function(){return f}});var o,a=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(o||(o={}));var s={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,c=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),h=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString(),a=c[e];if(!a)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[a].apply(console,r(["["+o+"]  "+t.name+":"],n))}},l=function(){function t(t){this.name=t,this._logLevel=u,this._logHandler=h,this._userLogHandler=null,a.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in o))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?s[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],t)),this._logHandler.apply(this,r([this,o.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],t)),this._logHandler.apply(this,r([this,o.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],t)),this._logHandler.apply(this,r([this,o.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],t)),this._logHandler.apply(this,r([this,o.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],t)),this._logHandler.apply(this,r([this,o.ERROR],t))},t}();function p(t){a.forEach((function(e){e.setLogLevel(t)}))}function f(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=s[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];var s=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:o[n].toLowerCase(),message:s,args:i,type:e.name})}},r=0,i=a;r<i.length;r++)n(i[r])}},589:function(t,e,n){n.d(e,{BH:function(){return p},LL:function(){return _},gQ:function(){return D},hu:function(){return i},g5:function(){return o},US:function(){return s},h$:function(){return u},r3:function(){return N},ne:function(){return O},p$:function(){return h},ZB:function(){return l},gK:function(){return M},GJ:function(){return S},jU:function(){return v},xb:function(){return P},uI:function(){return f},UG:function(){return d},Yr:function(){return g},b$:function(){return y},w9:function(){return T},cI:function(){return E},UI:function(){return k},xO:function(){return R},DV:function(){return A},ug:function(){return W},dS:function(){return V},Pz:function(){return C},Dv:function(){return F},Wj:function(){return j},lb:function(){return U}});var r=n(655),i=function(t,e){if(!t)throw o(e)},o=function(t){return new Error("Firebase Database (${JSCORE_VERSION}) INTERNAL ASSERT FAILED: "+t)},a=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},s={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,p=(15&s)<<2|c>>6,f=63&c;u||(f=64,a||(p=64)),r.push(n[h],n[l],n[p],n[f])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(a(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!==s){var h=a<<4&240|s>>2;if(r.push(h),64!==u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},u=function(t){var e=a(t);return s.encodeByteArray(e,!0)},c=function(t){try{return s.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function h(t){return l(void 0,t)}function l(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=l(t[n],e[n]));return t}var p=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function f(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:"")}function d(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function v(){return"object"==typeof self&&self.self===self}function y(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function g(){return!1}var m=function(t){function e(n,r,i){var o=t.call(this,r)||this;return o.code=n,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,_.prototype.create),o}return(0,r.ZT)(e,t),e}(Error),_=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],a=o?b(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new m(i,s,r);return u},t}();function b(t,e){return t.replace(w,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var w=/\{\$([^}]+)}/g;function E(t){return JSON.parse(t)}function C(t){return JSON.stringify(t)}var I=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=E(c(o[0])||""),n=E(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},T=function(t){var e=I(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},S=function(t){var e=I(t).claims;return"object"==typeof e&&!0===e.admin};function N(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function P(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function k(t,e,n){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r}function R(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},r=0,i=Object.entries(t);r<i.length;r++){var o=i[r];n(o[0],o[1])}return e.length?"&"+e.join("&"):""}var D=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782),i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295,l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},t}();function O(t,e){var n=new x(t,e);return n.subscribe.bind(n)}var x=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=L),void 0===r.error&&(r.error=L),void 0===r.complete&&(r.complete=L);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function L(){}var F=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")};function M(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return t+" failed: "+(r+" argument ")}function j(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(M(t,e,r)+"must be a valid function.")}function U(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(M(t,e,r)+"must be a valid context object.")}var V=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var o=t.charCodeAt(r);if(o>=55296&&o<=56319){var a=o-55296;r++,i(r<t.length,"Surrogate pair missing trail surrogate."),o=65536+(a<<10)+(t.charCodeAt(r)-56320)}o<128?e[n++]=o:o<2048?(e[n++]=o>>6|192,e[n++]=63&o|128):o<65536?(e[n++]=o>>12|224,e[n++]=o>>6&63|128,e[n++]=63&o|128):(e[n++]=o>>18|240,e[n++]=o>>12&63|128,e[n++]=o>>6&63|128,e[n++]=63&o|128)}return e},W=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e}},655:function(t,e,n){n.d(e,{ZT:function(){return i},pi:function(){return o},mG:function(){return a},Jh:function(){return s},XA:function(){return u},CR:function(){return c},fl:function(){return h}});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function a(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function s(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function u(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function h(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(c(arguments[e]));return t}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r](i,i.exports,n),i.loaded=!0,i.exports}n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=function(t){return(t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},function(){function t(t,e,n,r,i){return`<div class="modal-window ">\n    <div class="hidden-modal modal-wrapper ">\n        <div class="modal-header">\n            <div class="modal-title">\n                <h3>${e}</h3>\n            </div>\n            <button class="modal-btn close-modal-btn" ><i data-action="btn-close" class="fas fa-times"></i></button>\n        </div>\n        <div class="modal-body">\n            ${t}\n        </div>\n        <div class="modal-footer">\n            <button class="modal-btn add-source-btn" ${i?"data-id="+i:""} data-action="${r}">${n}</button>\n            <button class="modal-btn close-modal-btn" data-action="btn-close">Close</button>\n        </div>\n    </div>\n</div>`}function e(){document.querySelector(".modal-window").classList.add("hidden-modal"),setTimeout((()=>document.querySelector(".modal-window").remove()),500)}function r(t,e,n){const r={success:"far fa-check-circle",warning:"fas fa-exclamation-triangle",error:"fas fa-exclamation-circle"};for(let i in r)if(t===i){const t=`\n        <div class="message-container ${i}">\n            <div class="message-header">\n                <p>${e}</p>\n                <p><i class="${r[i]}"></i></p>\n            </div>\n            <div class="message-body">\n                <p>${n}</p>\n            </div>\n        </div>`;document.body.insertAdjacentHTML("beforeend",t)}const i=document.querySelector(".message-container");setTimeout((()=>i.classList.add("hide-element")),1e3),setTimeout((()=>i.remove()),1500)}class i{static getAll(){return fetch("https://passwordmaster-f995d-default-rtdb.firebaseio.com/password.json",{method:"GET",cache:"no-cache",mode:"cors",headers:{"Content-Type":"application/json"}}).then((t=>t.json()))}static create(t){return fetch("https://passwordmaster-f995d-default-rtdb.firebaseio.com/password.json",{method:"POST",mode:"cors",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}}).then((t=>t.json()))}static renderToHtml(t){for(let e in t)document.getElementById("main-wrapper").insertAdjacentHTML("afterbegin",f(t[e],e))}}function o(t){return t.length>0}var a=n(99);a.Z.registerVersion("firebase","8.1.2","app"),n(446),function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},r=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}return globalThis}(this);function i(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:i(t)}}!function(t,n){if(n){var i=r;t=t.split(".");for(var o=0;o<t.length-1;o++){var a=t[o];a in i||(i[a]={}),i=i[a]}(n=n(o=i[t=t[t.length-1]]))!=o&&null!=n&&e(i,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var a=r.setTimeout;n.prototype.c=function(t){a(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.v),reject:t(this.g)}},e.prototype.v=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.s(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.m(t):this.h(t)}},e.prototype.m=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)s.b(this.a[t]);this.a=null}};var s=new n;return e.prototype.s=function(t){var e=this.f();t.Pa(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,a=new e((function(t,e){i=t,o=e}));return this.Pa(r(t,i),r(n,o)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Pa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=o(t),a=r.next();!a.done;a=r.next())i(a.value).Pa(e,n)}))},e.all=function(t){var n=o(t),r=n.next();return r.done?i([]):new e((function(t,e){function o(e){return function(n){a[e]=n,0==--s&&t(a)}}var a=[],s=0;do{a.push(void 0),s++,i(r.value).Pa(o(a.length-1),e),r=n.next()}while(!r.done)}))},e}));var s=s||{},u=this||self,c=/^[\w+/_-]+[=]{0,2}$/,h=null;function l(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&c.test(t)?t:""}function p(){}function f(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function d(t){var e=f(t);return"array"==e||"object"==e&&"number"==typeof t.length}function v(t){return"function"==f(t)}function y(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function g(t){return Object.prototype.hasOwnProperty.call(t,m)&&t[m]||(t[m]=++_)}var m="closure_uid_"+(1e9*Math.random()>>>0),_=0;function b(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function E(t,e,n){return(E=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function C(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var I=Date.now;function T(t,e){function n(){}n.prototype=e.prototype,t.$a=e.prototype,t.prototype=new n,t.prototype.constructor=t}function S(t){return t}function N(t,e,n){this.code=k+t,this.message=e||R[t]||"",this.a=n||null}function A(t){var e=t&&t.code;return e?new N(e.substring(k.length),t.message,t.serverResponse):null}T(N,Error),N.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},N.prototype.toJSON=function(){return this.w()};var P,k="auth/",R={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},D={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function O(t){for(var e in D)if(D[e].id===t)return{firebaseEndpoint:(t=D[e]).Sa,secureTokenEndpoint:t.Ya,identityPlatformEndpoint:t.Va};return null}function x(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function L(t){if(Error.captureStackTrace)Error.captureStackTrace(this,L);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function F(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");L.call(this,n+t[r])}function M(t,e){throw new F("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function j(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function U(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function V(){this.b=this.a=null}P=O("__EID__")?"__EID__":void 0,T(L,Error),L.prototype.name="CustomError",T(F,L),F.prototype.name="AssertionError",j.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var W=new j((function(){return new H}),(function(t){t.reset()}));function q(){var t=be,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function H(){this.next=this.b=this.a=null}V.prototype.add=function(t,e){var n=W.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},H.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},H.prototype.reset=function(){this.next=this.b=this.a=null};var B=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},Q=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},K=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,a=0;a<n;a++)if(a in o){var s=o[a];e.call(void 0,s,a,t)&&(r[i++]=s)}return r},G=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},z=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function Y(t,e){return 0<=B(t,e)}function X(t,e){var n;return(n=0<=(e=B(t,e)))&&Array.prototype.splice.call(t,e,1),n}function J(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&Array.prototype.splice.call(t,r,1).length}))}function $(t){return Array.prototype.concat.apply([],arguments)}function Z(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var tt,et=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},nt=/&/g,rt=/</g,it=/>/g,ot=/"/g,at=/'/g,st=/\x00/g,ut=/[\x00&<>"']/;function ct(t,e){return-1!=t.indexOf(e)}function ht(t,e){return t<e?-1:t>e?1:0}t:{var lt=u.navigator;if(lt){var pt=lt.userAgent;if(pt){tt=pt;break t}}tt=""}function ft(t){return ct(tt,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function vt(t){for(var e in t)return!1;return!0}function yt(t){var e,n={};for(e in t)n[e]=t[e];return n}var gt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function mt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<gt.length;o++)n=gt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function _t(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(y(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function bt(t,e){this.a=t===It&&e||"",this.b=Ct}function wt(t){return t instanceof bt&&t.constructor===bt&&t.b===Ct?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}bt.prototype.sa=!0,bt.prototype.ra=function(){return this.a},bt.prototype.toString=function(){return"Const{"+this.a+"}"};var Et,Ct={},It={};function Tt(){if(void 0===Et){var t=null,e=u.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:S,createScript:S,createScriptURL:S})}catch(t){u.console&&u.console.error(t.message)}Et=t}else Et=t}return Et}function St(t,e){this.a=e===Rt?t:""}function Nt(t){return t instanceof St&&t.constructor===St?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+f(t)),"type_error:TrustedResourceUrl")}function At(t,e){var n=wt(t);if(!kt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=Tt();return new St(t=e?e.createScriptURL(t):t,Rt)}(t=n.replace(Pt,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof bt?wt(t):encodeURIComponent(String(t))})))}St.prototype.sa=!0,St.prototype.ra=function(){return this.a.toString()},St.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Pt=/%{(\w+)}/g,kt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Rt={};function Dt(t,e){this.a=e===Ut?t:""}function Ot(t){return t instanceof Dt&&t.constructor===Dt?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+f(t)),"type_error:SafeUrl")}Dt.prototype.sa=!0,Dt.prototype.ra=function(){return this.a.toString()},Dt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var xt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Lt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Ft=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Mt(t){if(t instanceof Dt)return t;if(t="object"==typeof t&&t.sa?t.ra():String(t),Ft.test(t))t=new Dt(t,Ut);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(Lt);t=e&&xt.test(e[1])?new Dt(t,Ut):null}return t}function jt(t){return t instanceof Dt?t:(t="object"==typeof t&&t.sa?t.ra():String(t),Ft.test(t)||(t="about:invalid#zClosurez"),new Dt(t,Ut))}var Ut={},Vt=new Dt("about:invalid#zClosurez",Ut);function Wt(t,e,n){this.a=n===qt?t:""}Wt.prototype.sa=!0,Wt.prototype.ra=function(){return this.a.toString()},Wt.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var qt={};function Ht(t,e,n,r){return t=t instanceof Dt?t:jt(t),e=e||u,n=n instanceof bt?wt(n):n||"",e.open(Ot(t),n,r,void 0)}function Bt(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Qt(t){return ut.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(nt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(rt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(it,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(ot,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(at,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(st,"&#0;"))),t}function Kt(t){return Kt[" "](t),t}Kt[" "]=p;var Gt,zt,Yt=ft("Opera"),Xt=ft("Trident")||ft("MSIE"),Jt=ft("Edge"),$t=Jt||Xt,Zt=ft("Gecko")&&!(ct(tt.toLowerCase(),"webkit")&&!ft("Edge"))&&!(ft("Trident")||ft("MSIE"))&&!ft("Edge"),te=ct(tt.toLowerCase(),"webkit")&&!ft("Edge");function ee(){var t=u.document;return t?t.documentMode:void 0}t:{var ne="",re=(zt=tt,Zt?/rv:([^\);]+)(\)|;)/.exec(zt):Jt?/Edge\/([\d\.]+)/.exec(zt):Xt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(zt):te?/WebKit\/(\S+)/.exec(zt):Yt?/(?:Version)[ \/]?(\S+)/.exec(zt):void 0);if(re&&(ne=re?re[1]:""),Xt){var ie=ee();if(null!=ie&&ie>parseFloat(ne)){Gt=String(ie);break t}}Gt=ne}var oe,ae={};function se(t){return function(t,e){var n=ae;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=et(String(Gt)).split("."),r=et(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=ht(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ht(0==a[2].length,0==s[2].length)||ht(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}u.document&&Xt?oe=ee()||parseInt(Gt,10)||void 0:oe=void 0;var ue=oe;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(zt){}var ce=!Xt||9<=Number(ue);function he(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function le(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.sa&&(e=e.ra()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:de.hasOwnProperty(n)?t.setAttribute(de[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var pe,fe,de={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];if(!d(o)||y(o)&&0<o.nodeType)r(o);else{t:{if(o&&"number"==typeof o.length){if(y(o)){var a="function"==typeof o.item||"string"==typeof o.item;break t}if(v(o)){a="function"==typeof o.item;break t}}a=!1}Q(a?Z(o):o,r)}}}function ye(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function ge(t){u.setTimeout((function(){throw t}),0)}function me(t,e){fe||function(){if(u.Promise&&u.Promise.resolve){var t=u.Promise.resolve(void 0);fe=function(){t.then(we)}}else fe=function(){var t=we;!v(u.setImmediate)||u.Window&&u.Window.prototype&&!ft("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(pe||(pe=function(){var t=u.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!ft("Presto")&&(t=function(){var t=ye(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=E((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!ft("Trident")&&!ft("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Fb;n.Fb=null,t()}},function(t){r.next={Fb:t},r=r.next,e.port2.postMessage(0)}}return function(t){u.setTimeout(t,0)}}()),pe(t)):u.setImmediate(t)}}(),_e||(fe(),_e=!0),be.add(t,e)}var _e=!1,be=new V;function we(){for(var t;t=q();){try{t.a.call(t.b)}catch(t){ge(t)}U(W,t)}_e=!1}function Ee(t,e){if(this.a=Ce,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=p)try{var n=this;t.call(e,(function(t){Fe(n,Ie,t)}),(function(t){if(!(t instanceof He))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Fe(n,Te,t)}))}catch(t){Fe(this,Te,t)}}var Ce=0,Ie=2,Te=3;function Se(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Se.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ne=new j((function(){return new Se}),(function(t){t.reset()}));function Ae(t,e,n){var r=Ne.get();return r.g=t,r.b=e,r.f=n,r}function Pe(t){if(t instanceof Ee)return t;var e=new Ee(p);return Fe(e,Ie,t),e}function ke(t){return new Ee((function(e,n){n(t)}))}function Re(t,e,n){Me(t,e,n,null)||me(C(e,t))}function De(t){return new Ee((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Ob:!0,value:o}:{Ob:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Re(t[o],C(i,o,!0),C(i,o,!1));else e(r)}))}function Oe(t,e){if(t.a==Ce)if(t.c){var n=t.c;if(n.b){for(var r=0,i=null,o=null,a=n.b;a&&(a.c||(r++,a.a==t&&(i=a),!(i&&1<r)));a=a.next)i||(o=a);i&&(n.a==Ce&&1==r?Oe(n,e):(o?((r=o).next==n.f&&(n.f=r),r.next=r.next.next):Ue(n),Ve(n,i,Te,e)))}t.c=null}else Fe(t,Te,e)}function xe(t,e){t.b||t.a!=Ie&&t.a!=Te||je(t),t.f?t.f.next=e:t.b=e,t.f=e}function Le(t,e,n,r){var i=Ae(null,null,null);return i.a=new Ee((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof He?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,xe(t,i),i.a}function Fe(t,e,n){t.a==Ce&&(t===n&&(e=Te,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Me(n,t.Zc,t.$c,t)||(t.i=n,t.a=e,t.c=null,je(t),e!=Te||n instanceof He||function(t,e){t.g=!0,me((function(){t.g&&qe.call(null,e)}))}(t,n)))}function Me(t,e,n,r){if(t instanceof Ee)return xe(t,Ae(e||p,n||null,r)),!0;if(x(t))return t.then(e,n,r),!0;if(y(t))try{var i=t.then;if(v(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,(function(t){a||(a=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function je(t){t.h||(t.h=!0,me(t.fc,t))}function Ue(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Ve(t,e,n,r){if(n==Te&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,We(e,n,r);else try{e.c?e.g.call(e.f):We(e,n,r)}catch(t){qe.call(null,t)}U(Ne,e)}function We(t,e,n){e==Ie?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Ee.prototype.then=function(t,e,n){return Le(this,v(t)?t:null,v(e)?e:null,n)},Ee.prototype.$goog_Thenable=!0,(t=Ee.prototype).na=function(t,e){return(t=Ae(t,t,e)).c=!0,xe(this,t),this},t.o=function(t,e){return Le(this,null,t,e)},t.cancel=function(t){if(this.a==Ce){var e=new He(t);me((function(){Oe(this,e)}),this)}},t.Zc=function(t){this.a=Ce,Fe(this,Ie,t)},t.$c=function(t){this.a=Ce,Fe(this,Te,t)},t.fc=function(){for(var t;t=Ue(this);)Ve(this,t,this.a,this.i);this.h=!1};var qe=ge;function He(t){L.call(this,t)}function Be(){0!=Qe&&(Ke[g(this)]=this),this.xa=this.xa,this.oa=this.oa}T(He,L),He.prototype.name="cancel";var Qe=0,Ke={};function Ge(t){if(!t.xa&&(t.xa=!0,t.Da(),0!=Qe)){var e=g(t);if(0!=Qe&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ke[e]}}Be.prototype.xa=!1,Be.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};var ze=Object.freeze||function(t){return t},Ye=!Xt||9<=Number(ue),Xe=Xt&&!se("9"),Je=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{u.addEventListener("test",p,e),u.removeEventListener("test",p,e)}catch(t){}return t}();function $e(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Ze(t,e){if($e.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Zt){t:{try{Kt(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}$e.prototype.preventDefault=function(){this.defaultPrevented=!0},T(Ze,$e);var tn=ze({2:"touch",3:"pen",4:"mouse"});Ze.prototype.preventDefault=function(){Ze.$a.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Xe)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Ze.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ua=i,this.key=++nn,this.va=this.Oa=!1}function on(t){t.va=!0,t.listener=null,t.proxy=null,t.src=null,t.Ua=null}function an(t){this.src=t,this.a={},this.b=0}function sn(t,e){var n=e.type;n in t.a&&X(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.va&&o.listener==e&&o.capture==!!n&&o.Ua==r)return i}return-1}an.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=un(t,e,r,i);return-1<a?(e=t[a],n||(e.Oa=!1)):((e=new rn(e,this.src,o,!!r,i)).Oa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),hn={};function ln(t,e,n,r,i){if(r&&r.once)fn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)ln(t,e[o],n,r,i);else n=En(n),t&&t[en]?In(t,e,n,y(r)?!!r.capture:!!r,i):pn(t,e,n,!1,r,i)}function pn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=y(i)?!!i.capture:!!i,s=bn(t);if(s||(t[cn]=s=new an(t)),!(n=s.add(e,n,r,a,o)).proxy)if(r=function(){var t=_n,e=Ye?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Je||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(yn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}}function fn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)fn(t,e[o],n,r,i);else n=En(n),t&&t[en]?Tn(t,e,n,y(r)?!!r.capture:!!r,i):pn(t,e,n,!0,r,i)}function dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,r,i);else r=y(r)?!!r.capture:!!r,n=En(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&-1<(n=un(o=t.a[e],n,r,i))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=bn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,r,i)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.va){var e=t.src;if(e&&e[en])sn(e.v,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(yn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=bn(e))?(sn(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function yn(t){return t in hn?hn[t]:hn[t]="on"+t}function gn(t,e,n,r){var i=!0;if((t=bn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.va&&(o=mn(o,r),i=i&&!1!==o)}return i}function mn(t,e){var n=t.listener,r=t.Ua||t.src;return t.Oa&&vn(t),n.call(r,e)}function _n(t,e){if(t.va)return!0;if(!Ye){if(!e)t:{e=["window","event"];for(var n=u,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Ze(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=gn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=gn(r[i],t,!1,e),n=n&&o}return n}return mn(t,new Ze(e,this))}function bn(t){return(t=t[cn])instanceof an?t:null}var wn="__closure_events_fn_"+(1e9*Math.random()>>>0);function En(t){return v(t)?t:(t[wn]||(t[wn]=function(e){return t.handleEvent(e)}),t[wn])}function Cn(){Be.call(this),this.v=new an(this),this.$b=this,this.fb=null}function In(t,e,n,r,i){t.v.add(String(e),n,!1,r,i)}function Tn(t,e,n,r,i){t.v.add(String(e),n,!0,r,i)}function Sn(t,e,n,r){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.va&&a.capture==n){var s=a.listener,u=a.Ua||a.src;a.Oa&&sn(t.v,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}function Nn(t,e,n){if(v(t))n&&(t=E(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=E(t.handleEvent,t)}return 2147483647<Number(e)?-1:u.setTimeout(t,e||0)}function An(t){var e=null;return new Ee((function(n,r){-1==(e=Nn((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).o((function(t){throw u.clearTimeout(e),t}))}function Pn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(d(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function kn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.V||"function"!=typeof t.V){if(d(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function Rn(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Rn)for(n=t.Y(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Dn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];On(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)On(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function On(t,e){return Object.prototype.hasOwnProperty.call(t,e)}T(Cn,Be),Cn.prototype[en]=!0,Cn.prototype.addEventListener=function(t,e,n,r){ln(this,t,e,n,r)},Cn.prototype.removeEventListener=function(t,e,n,r){dn(this,t,e,n,r)},Cn.prototype.dispatchEvent=function(t){var e,n=this.fb;if(n)for(e=[];n;n=n.fb)e.push(n);n=this.$b;var r=t.type||t;if("string"==typeof t)t=new $e(t,n);else if(t instanceof $e)t.target=t.target||n;else{var i=t;mt(t=new $e(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.b=e[o];i=Sn(a,r,!0,t)&&i}if(i=Sn(a=t.b=n,r,!0,t)&&i,i=Sn(a,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Sn(a=t.b=e[o],r,!1,t)&&i;return i},Cn.prototype.Da=function(){if(Cn.$a.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)on(n[r]);delete e.a[t],e.b--}}this.fb=null},(t=Rn.prototype).V=function(){Dn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return Dn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return On(this.b,t)?this.b[t]:e},t.set=function(t,e){On(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var xn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ln(t,e){var n;this.a=this.l=this.f="",this.g=null,this.h=this.c="",this.i=!1,t instanceof Ln?(this.i=void 0!==e?e:t.i,Fn(this,t.f),this.l=t.l,this.a=t.a,Mn(this,t.g),this.c=t.c,jn(this,rr(t.b)),this.h=t.h):t&&(n=String(t).match(xn))?(this.i=!!e,Fn(this,n[1]||"",!0),this.l=Hn(n[2]||""),this.a=Hn(n[3]||"",!0),Mn(this,n[4]),this.c=Hn(n[5]||"",!0),jn(this,n[6]||"",!0),this.h=Hn(n[7]||"")):(this.i=!!e,this.b=new Jn(null,this.i))}function Fn(t,e,n){t.f=n?Hn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Mn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function jn(t,e,n){e instanceof Jn?(t.b=e,function(t,e){e&&!t.f&&($n(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(tr(this,e),nr(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=Bn(e,Yn)),t.b=new Jn(e,t.i))}function Un(t,e,n){t.b.set(e,n)}function Vn(t,e){return t.b.get(e)}function Wn(t){return t instanceof Ln?new Ln(t):new Ln(t,void 0)}function qn(t,e,n,r){var i=new Ln(null,void 0);return t&&Fn(i,t),e&&(i.a=e),n&&Mn(i,n),r&&(i.c=r),i}function Hn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Bn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Qn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Qn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ln.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Bn(e,Kn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Bn(e,Kn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.c)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(Bn(n,"/"==n.charAt(0)?zn:Gn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Bn(n,Xn)),t.join("")},Ln.prototype.resolve=function(t){var e=new Ln(this),n=!!t.f;n?Fn(e,t.f):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var r=t.c;if(n)Mn(e,t.g);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.a&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ct(i,"./")||ct(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.b.toString(),n?jn(e,rr(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Kn=/[#\/\?@]/g,Gn=/[#\?:]/g,zn=/[#\?]/g,Yn=/[#\?@]/g,Xn=/#/g;function Jn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function $n(t){t.a||(t.a=new Rn,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Zn(t){var e=kn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Jn(null,void 0);t=Pn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?nr(n,i,o):n.add(i,o)}return n}function tr(t,e){$n(t),e=ir(t,e),On(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,On((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Dn(t)))}function er(t,e){return $n(t),e=ir(t,e),On(t.a.b,e)}function nr(t,e,n){tr(t,e),0<n.length&&(t.c=null,t.a.set(ir(t,e),Z(n)),t.b+=n.length)}function rr(t){var e=new Jn;return e.c=t.c,t.a&&(e.a=new Rn(t.a),e.b=t.b),e}function ir(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function or(t){var e=[];return sr(new ar,t,e),e.join("")}function ar(){}function sr(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var r=e;e=r.length,n.push("[");for(var i="",o=0;o<e;o++)n.push(i),sr(t,r[o],n),i=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(r in n.push("{"),i="",e)Object.prototype.hasOwnProperty.call(e,r)&&"function"!=typeof(o=e[r])&&(n.push(i),hr(r,n),n.push(":"),sr(t,o,n),i=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":hr(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=Jn.prototype).add=function(t,e){$n(this),this.c=null,t=ir(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){$n(this),this.a.forEach((function(n,r){Q(n,(function(n){t.call(e,n,r,this)}),this)}),this)},t.Y=function(){$n(this);for(var t=this.a.V(),e=this.a.Y(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.V=function(t){$n(this);var e=[];if("string"==typeof t)er(this,t)&&(e=$(e,this.a.get(ir(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=$(e,t[n])}return e},t.set=function(t,e){return $n(this),this.c=null,er(this,t=ir(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var ur={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},cr=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function hr(t,e){e.push('"',t.replace(cr,(function(t){var e=ur[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ur[t]=e),e})),'"')}function lr(){var t=Rr();return Xt&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function pr(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function fr(t,e){e=e||u.window;var n="about:blank";t&&(n=Ot(Mt(t)||Vt)),e.location.href=n}function dr(t,e){var n,r=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?r.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<dr(t[n],e[n]).length&&r.push(n):t[n]!==e[n]&&r.push(n):r.push(n);for(n in e)n in t||r.push(n);return r}function vr(t){return!!((t=(t||Rr()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function yr(t){t=t||u.window;try{t.close()}catch(t){}}function gr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Rr().toLowerCase(),r&&(e.target=r,ct(n,"crios/")&&(e.target="_blank")),Ar(Rr())==Sr&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Dt?n:Mt(void 0!==n.href?n.href:String(n))||Vt,n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((ft("iPhone")&&!ft("iPod")&&!ft("iPad")||ft("iPad")||ft("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(_t(a=ye(document,"A"),"HTMLAnchorElement"),e=e instanceof Dt?e:jt(e),a.href=Ot(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=Ht("",r,n,a),t=Ot(e),a&&($t&&ct(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Qt(t)+'">',t=new Wt(t=(r=Tt())?r.createHTML(t):t,null,qt),r=a.document)&&(r.write(function(t){return t instanceof Wt&&t.constructor===Wt?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+f(t)),"type_error:SafeHtml")}(t)),r.close())):(a=Ht(e,r,n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var mr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,_r=/^[^@]+@[^@]+$/;function br(){var t=null;return new Ee((function(e){"complete"==u.document.readyState?e():(t=function(){e()},fn(window,"load",t))})).o((function(e){throw dn(window,"load",t),e}))}function wr(t){return t=t||Rr(),!("file:"!==Fr()&&"ionic:"!==Fr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Er(){var t=u.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Cr(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function Ir(){return a.Z.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":a.Z.INTERNAL.hasOwnProperty("node")?"Node":Cr()?"Worker":"Browser"}function Tr(){var t=Ir();return"ReactNative"===t||"Node"===t}var Sr="Firefox",Nr="Chrome";function Ar(t){var e=t.toLowerCase();return ct(e,"opera/")||ct(e,"opr/")||ct(e,"opios/")?"Opera":ct(e,"iemobile")?"IEMobile":ct(e,"msie")||ct(e,"trident/")?"IE":ct(e,"edge/")?"Edge":ct(e,"firefox/")?Sr:ct(e,"silk/")?"Silk":ct(e,"blackberry")?"Blackberry":ct(e,"webos")?"Webos":!ct(e,"safari/")||ct(e,"chrome/")||ct(e,"crios/")||ct(e,"android")?!ct(e,"chrome/")&&!ct(e,"crios/")||ct(e,"edge/")?ct(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Nr:"Safari"}var Pr={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function kr(t,e){e=e||[];var n,r=[],i={};for(n in Pr)i[Pr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=Ir())?r=Ar(i=Rr()):"Worker"===r&&(r=Ar(i=Rr())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Rr(){return u.navigator&&u.navigator.userAgent||""}function Dr(t,e){t=t.split("."),e=e||u;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Or(){try{var t=u.localStorage,e=Wr();if(t)return t.setItem(e,"1"),t.removeItem(e),!lr()||!!u.indexedDB}catch(t){return Cr()&&!!u.indexedDB}return!1}function xr(){return(Lr()||"chrome-extension:"===Fr()||wr())&&!Tr()&&Or()&&!Cr()}function Lr(){return"http:"===Fr()||"https:"===Fr()}function Fr(){return u.location&&u.location.protocol||null}function Mr(t){return!vr(t=t||Rr())&&Ar(t)!=Sr}function jr(t){return void 0===t?null:or(t)}function Ur(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Vr(t){if(null!==t)return JSON.parse(t)}function Wr(t){return t||Math.floor(1e9*Math.random()).toString()}function qr(t){return"Safari"!=Ar(t=t||Rr())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Hr(){var t=u.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Br(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Rr(),e=Ir(),this.b=vr(t)||"ReactNative"===e}function Qr(){var t=u.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Kr(t){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t)}function Gr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function zr(){return!(!Dr("fireauth.oauthhelper",u)&&!Dr("fireauth.iframe",u))}Br.prototype.get=function(){var t=u.navigator;return!t||"boolean"!=typeof t.onLine||!Lr()&&"chrome-extension:"!==Fr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Yr,Xr={};function Jr(t){Xr[t]||(Xr[t]=!0,Kr(t))}try{var $r={};Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:2}),Yr=2==$r.abcd}catch(zt){Yr=!1}function Zr(t,e,n){Yr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function ti(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Zr(t,n,e[n])}function ei(t){var e={};return ti(e,t),e}function ni(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Zr(e,n,ni(t[n]));return e}function ri(t){var e=t&&(t[ui]?"phone":null);if(!(e&&t&&t[si]))throw new N("internal-error","Internal assert: invalid MultiFactorInfo object");Zr(this,"uid",t[si]),Zr(this,"displayName",t[oi]||null);var n=null;t[ai]&&(n=new Date(t[ai]).toUTCString()),Zr(this,"enrollmentTime",n),Zr(this,"factorId",e)}function ii(t){try{var e=new ci(t)}catch(t){e=null}return e}ri.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var oi="displayName",ai="enrolledAt",si="mfaEnrollmentId",ui="phoneInfo";function ci(t){ri.call(this,t),Zr(this,"phoneNumber",t[ui])}function hi(t){var e={},n=t[di],r=t[yi],i=t[gi];if(t=ii(t[vi]),!i||i!=pi&&i!=fi&&!n||i==fi&&!r||i==li&&!t)throw Error("Invalid checkActionCode response!");i==fi?(e[_i]=n||null,e[wi]=n||null,e[mi]=r):(e[_i]=r||null,e[wi]=r||null,e[mi]=n||null),e[bi]=t||null,Zr(this,Ci,i),Zr(this,Ei,ni(e))}T(ci,ri),ci.prototype.w=function(){var t=ci.$a.w.call(this);return t.phoneNumber=this.phoneNumber,t};var li="REVERT_SECOND_FACTOR_ADDITION",pi="EMAIL_SIGNIN",fi="VERIFY_AND_CHANGE_EMAIL",di="email",vi="mfaInfo",yi="newEmail",gi="requestType",mi="email",_i="fromEmail",bi="multiFactorInfo",wi="previousEmail",Ei="data",Ci="operation";function Ii(t){var e=Vn(t=Wn(t),Ti)||null,n=Vn(t,Si)||null,r=Vn(t,Pi)||null;if(r=r&&Ri[r]||null,!e||!n||!r)throw new N("argument-error",Ti+", "+Si+"and "+Pi+" are required in a valid action code URL.");ti(this,{apiKey:e,operation:r,code:n,continueUrl:Vn(t,Ni)||null,languageCode:Vn(t,Ai)||null,tenantId:Vn(t,ki)||null})}var Ti="apiKey",Si="oobCode",Ni="continueUrl",Ai="languageCode",Pi="mode",ki="tenantId",Ri={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:li,signIn:pi,verifyAndChangeEmail:fi,verifyEmail:"VERIFY_EMAIL"};function Di(t){try{return new Ii(t)}catch(t){return null}}function Oi(t){var e=t[ji];if(void 0===e)throw new N("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new N("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[xi];if(n&&"object"==typeof n){e=n[Wi];var r=n[Ui];if(n=n[Vi],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new N("argument-error",Ui+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new N("argument-error",Vi+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new N("argument-error",Wi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new N("missing-android-pkg-name")}}else if(void 0!==n)throw new N("argument-error",xi+" property must be a non null object when specified.");if(this.f=null,(e=t[Mi])&&"object"==typeof e){if("string"==typeof(e=e[qi])&&e.length)this.f=e;else if(void 0!==e)throw new N("argument-error",qi+" property must be a non empty string when specified.")}else if(void 0!==e)throw new N("argument-error",Mi+" property must be a non null object when specified.");if(void 0!==(e=t[Fi])&&"boolean"!=typeof e)throw new N("argument-error",Fi+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Li])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new N("argument-error",Li+" property must be a non empty string when specified.");this.i=t||null}var xi="android",Li="dynamicLinkDomain",Fi="handleCodeInApp",Mi="iOS",ji="url",Ui="installApp",Vi="minimumVersion",Wi="packageName",qi="bundleId";function Hi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Bi=null;function Qi(t){var e=Gi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,I(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Ki(t){try{return new Qi(t)}catch(t){return null}}function Gi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Bi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Bi){Bi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===Bi[o]&&(Bi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Qi.prototype.S=function(){return this.f},Qi.prototype.i=function(){return this.b},Qi.prototype.toString=function(){return this.g};var zi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Yi=["client_id","response_type","scope","redirect_uri","state"],Xi={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:Yi},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:Yi},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:Yi},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:zi},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};function Ji(t){for(var e in Xi)if(Xi[e].fa==t)return Xi[e];return null}function $i(t){var e={};e["facebook.com"]=ro,e["google.com"]=oo,e["github.com"]=io,e["twitter.com"]=ao;var n=t&&t[to];try{if(n)return e[n]?new e[n](t):new no(t);if(void 0!==t[Zi])return new eo(t)}catch(t){}return null}var Zi="idToken",to="providerId";function eo(t){var e=t[to];if(!e&&t[Zi]){var n=Ki(t[Zi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Zr(this,"providerId",e),Zr(this,"isNewUser",n)}function no(t){eo.call(this,t),Zr(this,"profile",ni((t=Vr(t.rawUserInfo||"{}"))||{}))}function ro(t){if(no.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function io(t){if(no.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",this.profile&&this.profile.login||null)}function oo(t){if(no.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function ao(t){if(no.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",t.screenName||null)}function so(t){var e=Wn(t),n=Vn(e,"link"),r=Vn(Wn(n),"link");return e=Vn(e,"deep_link_id"),Vn(Wn(e),"link")||e||r||n||t}function uo(t,e){if(!t&&!e)throw new N("internal-error","Internal assert: no raw session string available");if(t&&e)throw new N("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?co:ho}T(no,eo),T(ro,no),T(io,no),T(oo,no),T(ao,no);var co="enroll",ho="signin";function lo(){}function po(t,e){return t.then((function(t){if(t[ts]){var n=Ki(t[ts]);if(!n||e!=n.h)throw new N("user-mismatch");return t}throw new N("user-mismatch")})).o((function(t){throw t&&t.code&&t.code==k+"user-not-found"?new N("user-mismatch"):t}))}function fo(t,e){if(!e)throw new N("internal-error","failed to construct a credential");this.a=e,Zr(this,"providerId",t),Zr(this,"signInMethod",t)}function vo(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function yo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new fo(t.providerId,t.pendingToken)}catch(t){}return null}function go(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Zr(this,"idToken",e.idToken),e.accessToken&&Zr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Zr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new N("internal-error","failed to construct a credential");Zr(this,"accessToken",e.oauthToken),Zr(this,"secret",e.oauthTokenSecret)}Zr(this,"providerId",t),Zr(this,"signInMethod",n)}function mo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Zn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function _o(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new go(t.providerId,e,t.signInMethod)}catch(t){}}return null}function bo(t,e){this.Pc=e||[],ti(this,{providerId:t,isOAuthProvider:!0}),this.Hb={},this.ob=(Ji(t)||{}).Ja||null,this.nb=null}function wo(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new N("argument-error",'SAML provider IDs must be prefixed with "saml."');bo.call(this,t,[])}function Eo(t){bo.call(this,t,Yi),this.a=[]}function Co(){Eo.call(this,"facebook.com")}function Io(t){if(!t)throw new N("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return y(t)&&(e=t.accessToken),(new Co).credential({accessToken:e})}function To(){Eo.call(this,"github.com")}function So(t){if(!t)throw new N("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return y(t)&&(e=t.accessToken),(new To).credential({accessToken:e})}function No(){Eo.call(this,"google.com"),this.Ca("profile")}function Ao(t,e){var n=t;return y(t)&&(n=t.idToken,e=t.accessToken),(new No).credential({idToken:n,accessToken:e})}function Po(){bo.call(this,"twitter.com",zi)}function ko(t,e){var n=t;if(y(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new N("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new go("twitter.com",n,"twitter.com")}function Ro(t,e,n){this.a=t,this.f=e,Zr(this,"providerId","password"),Zr(this,"signInMethod",n===Oo.EMAIL_LINK_SIGN_IN_METHOD?Oo.EMAIL_LINK_SIGN_IN_METHOD:Oo.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Do(t){return t&&t.email&&t.password?new Ro(t.email,t.password,t.signInMethod):null}function Oo(){ti(this,{providerId:"password",isOAuthProvider:!1})}function xo(t,e){if(!(e=Lo(e)))throw new N("argument-error","Invalid email link!");return new Ro(t,e.code,Oo.EMAIL_LINK_SIGN_IN_METHOD)}function Lo(t){return(t=Di(t=so(t)))&&t.operation===pi?t:null}function Fo(t){if(!(t.cb&&t.bb||t.La&&t.ea))throw new N("internal-error");this.a=t,Zr(this,"providerId","phone"),this.fa="phone",Zr(this,"signInMethod","phone")}function Mo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return Q(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Fo(e)}return null}function jo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.cb,code:t.a.bb}}function Uo(t){try{this.a=t||a.Z.auth()}catch(t){throw new N("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}ti(this,{providerId:"phone",isOAuthProvider:!1})}function Vo(t,e){if(!t)throw new N("missing-verification-id");if(!e)throw new N("missing-verification-code");return new Fo({cb:t,bb:e})}function Wo(t){if(t.temporaryProof&&t.phoneNumber)return new Fo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,a=t&&t.pendingToken;try{switch(e){case"google.com":return Ao(o,n);case"facebook.com":return Io(n);case"github.com":return So(n);case"twitter.com":return ko(n,r);default:return n||r||o||a?a?0==e.indexOf("saml.")?new fo(e,a):new go(e,{pendingToken:a,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new Eo(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function qo(t){if(!t.isOAuthProvider)throw new N("invalid-oauth-provider")}function Ho(t,e,n,r,i,o,a){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new N("invalid-auth-event");if(this.g&&this.a)throw new N("invalid-auth-event");if(this.g&&!this.f)throw new N("invalid-auth-event")}function Bo(t){return(t=t||{}).type?new Ho(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&A(t.error),t.postBody,t.tenantId):null}function Qo(){this.b=null,this.a=[]}uo.prototype.Ha=function(){return this.a?Pe(this.a):Pe(this.b)},uo.prototype.w=function(){return this.type==co?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},lo.prototype.ja=function(){},lo.prototype.b=function(){},lo.prototype.c=function(){},lo.prototype.w=function(){},fo.prototype.ja=function(t){return ws(t,vo(this))},fo.prototype.b=function(t,e){var n=vo(this);return n.idToken=e,Es(t,n)},fo.prototype.c=function(t,e){return po(Cs(t,vo(this)),e)},fo.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},go.prototype.ja=function(t){return ws(t,mo(this))},go.prototype.b=function(t,e){var n=mo(this);return n.idToken=e,Es(t,n)},go.prototype.c=function(t,e){return po(Cs(t,mo(this)),e)},go.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},bo.prototype.Ka=function(t){return this.Hb=yt(t),this},T(wo,bo),T(Eo,bo),Eo.prototype.Ca=function(t){return Y(this.a,t)||this.a.push(t),this},Eo.prototype.Pb=function(){return Z(this.a)},Eo.prototype.credential=function(t,e){var n;if(!(n=y(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new N("argument-error","credential failed: must provide the ID token and/or the access token.");return new go(this.providerId,n,this.providerId)},T(Co,Eo),Zr(Co,"PROVIDER_ID","facebook.com"),Zr(Co,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),T(To,Eo),Zr(To,"PROVIDER_ID","github.com"),Zr(To,"GITHUB_SIGN_IN_METHOD","github.com"),T(No,Eo),Zr(No,"PROVIDER_ID","google.com"),Zr(No,"GOOGLE_SIGN_IN_METHOD","google.com"),T(Po,bo),Zr(Po,"PROVIDER_ID","twitter.com"),Zr(Po,"TWITTER_SIGN_IN_METHOD","twitter.com"),Ro.prototype.ja=function(t){return this.signInMethod==Oo.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Rs,{email:this.a,oobCode:this.f}):iu(t,Zs,{email:this.a,password:this.f})},Ro.prototype.b=function(t,e){return this.signInMethod==Oo.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Ds,{idToken:e,email:this.a,oobCode:this.f}):iu(t,Qs,{idToken:e,email:this.a,password:this.f})},Ro.prototype.c=function(t,e){return po(this.ja(t),e)},Ro.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},ti(Oo,{PROVIDER_ID:"password"}),ti(Oo,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),ti(Oo,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Fo.prototype.ja=function(t){return t.eb(jo(this))},Fo.prototype.b=function(t,e){var n=jo(this);return n.idToken=e,iu(t,eu,n)},Fo.prototype.c=function(t,e){var n=jo(this);return n.operation="REAUTH",po(t=iu(t,nu,n),e)},Fo.prototype.w=function(){var t={providerId:"phone"};return this.a.cb&&(t.verificationId=this.a.cb),this.a.bb&&(t.verificationCode=this.a.bb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Uo.prototype.eb=function(t,e){var n=this.a.a;return Pe(e.verify()).then((function(r){if("string"!=typeof r)throw new N("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=y(t)?t.session:null,o=y(t)?t.phoneNumber:t;return(i&&i.type==co?i.Ha().then((function(t){return function(t,e){return iu(t,Gs,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==ho?i.Ha().then((function(e){return function(t,e){return iu(t,zs,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return iu(t,Hs,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new N("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},ti(Uo,{PROVIDER_ID:"phone"}),ti(Uo,{PHONE_SIGN_IN_METHOD:"phone"}),Ho.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Ho.prototype.S=function(){return this.h},Ho.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Ko,Go=null;function zo(t){var e="unauthorized-domain",n=void 0,r=Wn(t);t=r.a,"chrome-extension"==(r=r.f)?n=Bt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=Bt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",N.call(this,e,n)}function Yo(t,e,n){N.call(this,t,n),(t=e||{}).Ib&&Zr(this,"email",t.Ib),t.ea&&Zr(this,"phoneNumber",t.ea),t.credential&&Zr(this,"credential",t.credential),t.Yb&&Zr(this,"tenantId",t.Yb)}function Xo(t){if(t.code){var e=t.code||"";0==e.indexOf(k)&&(e=e.substring(k.length));var n={credential:Wo(t),Yb:t.tenantId};if(t.email)n.Ib=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new N(e,t.message||void 0);return new Yo(e,n,t.message)}return null}function Jo(){}function $o(t){return t.c||(t.c=t.b())}function Zo(){}function ta(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function ea(){}function na(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=E(this.pc,this),this.a.onerror=E(this.Rb,this),this.a.onprogress=E(this.qc,this),this.a.ontimeout=E(this.uc,this)}function ra(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function ia(t,e,n){this.reset(t,e,n,void 0,void 0)}function oa(t){this.f=t,this.b=this.c=this.a=null}function aa(t,e){this.name=t,this.value=e}T(zo,N),T(Yo,N),Yo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&mt(t,e),t},Yo.prototype.toJSON=function(){return this.w()},Jo.prototype.c=null,T(Zo,Jo),Zo.prototype.a=function(){var t=ta(this);return t?new ActiveXObject(t):new XMLHttpRequest},Zo.prototype.b=function(){var t={};return ta(this)&&(t[0]=!0,t[1]=!0),t},Ko=new Zo,T(ea,Jo),ea.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new na;throw Error("Unsupported browser")},ea.prototype.b=function(){return{}},(t=na.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.pc=function(){this.status=200,this.response=this.responseText=this.a.responseText,ra(this,4)},t.Rb=function(){this.status=500,this.response=this.responseText="",ra(this,4)},t.uc=function(){this.Rb()},t.qc=function(){this.status=200,ra(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},ia.prototype.a=null,ia.prototype.reset=function(t,e,n,r,i){r||I(),delete this.a},aa.prototype.toString=function(){return this.name};var sa=new aa("SEVERE",1e3),ua=new aa("WARNING",900),ca=new aa("CONFIG",700),ha=new aa("FINE",500);function la(t){return t.c?t.c:t.a?la(t.a):(M("Root logger has no level set."),null)}oa.prototype.log=function(t,e,n){if(t.value>=la(this).value)for(v(e)&&(e=e()),t=new ia(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var pa={},fa=null;function da(t){var e;if(fa||(fa=new oa(""),pa[""]=fa,fa.c=ca),!(e=pa[t])){e=new oa(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=da(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,pa[t]=e}return e}function va(t,e){t&&t.log(ha,e,void 0)}function ya(t){this.f=t}function ga(t){Cn.call(this),this.u=t,this.h=void 0,this.readyState=ma,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.s="GET",this.f="",this.a=!1,this.i=da("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}T(ya,Jo),ya.prototype.a=function(){return new ga(this.f)},ya.prototype.b=function(t){return function(){return t}}({}),T(ga,Cn);var ma=0;function _a(t){t.c.read().then(t.oc.bind(t)).catch(t.Ta.bind(t))}function ba(t){t.readyState=4,t.g=null,t.c=null,t.m=null,wa(t)}function wa(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Ea(t){Cn.call(this),this.headers=new Rn,this.O=t||null,this.c=!1,this.A=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.G=!1,this.g=0,this.s=null,this.m=Ca,this.u=this.R=!1}(t=ga.prototype).open=function(t,e){if(this.readyState!=ma)throw this.abort(),Error("Error reopening a connection");this.s=t,this.f=e,this.readyState=1,wa(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.s,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.tc.bind(this),this.Ta.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ba(this)),this.readyState=ma},t.tc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,wa(this)),this.a&&(this.readyState=3,wa(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):void 0!==u.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,_a(this)):t.text().then(this.sc.bind(this),this.Ta.bind(this)))))},t.oc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?ba(this):wa(this),3==this.readyState&&_a(this)}},t.sc=function(t){this.a&&(this.response=this.responseText=t,ba(this))},t.rc=function(t){this.a&&(this.response=t,ba(this))},t.Ta=function(t){var e=this.i;e&&e.log(ua,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&ba(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(ua,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(ua,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(ga.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),T(Ea,Cn);var Ca="";Ea.prototype.b=da("goog.net.XhrIo");var Ia=/^https?$/i,Ta=["POST","PUT"];function Sa(t){return"content-type"==t.toLowerCase()}function Na(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Aa(t),ka(t)}function Aa(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Pa(t){if(t.c&&void 0!==s)if(t.A[1]&&4==Da(t)&&2==Oa(t))va(t.b,xa(t,"Local request error detected and ignored"));else if(t.i&&4==Da(t))Nn(t.Ub,0,t);else if(t.dispatchEvent("readystatechange"),4==Da(t)){va(t.b,xa(t,"Request complete")),t.c=!1;try{var e,n=Oa(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(xn)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}i=!Ia.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Da(t)?t.a.statusText:""}catch(e){va(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Oa(t)+"]",Aa(t)}}finally{ka(t)}}}function ka(t,e){if(t.a){Ra(t);var n=t.a,r=t.A[0]?p:null;t.a=null,t.A=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(sa,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Ra(t){t.a&&t.u&&(t.a.ontimeout=null),t.s&&(u.clearTimeout(t.s),t.s=null)}function Da(t){return t.a?t.a.readyState:0}function Oa(t){try{return 2<Da(t)?t.a.status:-1}catch(t){return-1}}function xa(t,e){return e+" ["+t.P+" "+t.l+" "+Oa(t)+"]"}function La(t){var e=Ka;this.g=[],this.u=e,this.s=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Fa(t,e,n){t.a=!0,t.c=n,t.f=!e,Va(t)}function Ma(t){if(t.a){if(!t.m)throw new Wa(t);t.m=!1}}function ja(t,e,n,r){t.g.push([e,n,r]),t.a&&Va(t)}function Ua(t){return z(t.g,(function(t){return v(t[1])}))}function Va(t){if(t.h&&t.a&&Ua(t)){var e=t.h,n=Ba[e];n&&(u.clearTimeout(n.a),delete Ba[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],a=i[1];if(i=i[2],o=t.f?a:o)try{var s=o.call(i||t.s,e);void 0!==s&&(t.f=t.f&&(s==e||s instanceof Error),t.c=e=s),(x(e)||"function"==typeof u.Promise&&e instanceof u.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,Ua(t)||(n=!0)}}t.c=e,r&&(s=E(t.v,t,!0),r=E(t.v,t,!1),e instanceof La?(ja(e,s,r),e.A=!0):e.then(s,r)),n&&(e=new Ha(e),Ba[e.a]=e,t.h=e.a)}function Wa(){L.call(this)}function qa(){L.call(this)}function Ha(t){this.a=u.setTimeout(E(this.c,this),0),this.b=t}(t=Ea.prototype).Ma=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",va(this.b,xa(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(va(this.b,xa(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ka(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ka(this,!0)),Ea.$a.Da.call(this)},t.Ub=function(){this.xa||(this.N||this.i||this.f?Pa(this):this.Ic())},t.Ic=function(){Pa(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Ca:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(sa,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return va(this.b,"Can not get response: "+t.message),null}},La.prototype.cancel=function(t){if(this.a)this.c instanceof La&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.s,this):this.m=!0,this.a||(t=new qa(this),Ma(this),Fa(this,!1,t))}},La.prototype.v=function(t,e){this.i=!1,Fa(this,t,e)},La.prototype.then=function(t,e,n){var r,i,o=new Ee((function(t,e){r=t,i=e}));return ja(this,r,(function(t){t instanceof qa?o.cancel():i(t)})),o.then(t,e,n)},La.prototype.$goog_Thenable=!0,T(Wa,L),Wa.prototype.message="Deferred has already fired",Wa.prototype.name="AlreadyCalledError",T(qa,L),qa.prototype.message="Deferred was canceled",qa.prototype.name="CanceledError",Ha.prototype.c=function(){throw delete Ba[this.a],this.b};var Ba={};function Qa(t){var e={},n=e.document||document,r=Nt(t).toString(),i=ye(document,"SCRIPT"),o={Vb:i,Ma:void 0},a=new La(o),s=null,c=null!=e.timeout?e.timeout:5e3;return 0<c&&(s=window.setTimeout((function(){Ga(i,!0);var t=new Xa(Ya,"Timeout reached for loading script "+r);Ma(a),Fa(a,!1,t)}),c),o.Ma=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ga(i,e.wd||!1,s),Ma(a),Fa(a,!0,null))},i.onerror=function(){Ga(i,!0,s);var t=new Xa(za,"Error while loading script "+r);Ma(a),Fa(a,!1,t)},mt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),le(i,o),function(t,e){_t(t,"HTMLScriptElement"),t.src=Nt(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=u?e=l(e.document):(null===h&&(h=l(u.document)),e=h),e&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function Ka(){if(this&&this.Vb){var t=this.Vb;t&&"SCRIPT"==t.tagName&&Ga(t,!0,this.Ma)}}function Ga(t,e,n){null!=n&&u.clearTimeout(n),t.onload=p,t.onerror=p,t.onreadystatechange=p,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var za=0,Ya=1;function Xa(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),L.call(this,n),this.code=t}function Ja(t){this.f=t}function $a(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.v=t.secureTokenTimeout||es,this.g=yt(t.secureTokenHeaders||ns),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.m=t.firebaseTimeout||rs,this.a=yt(t.firebaseHeaders||is),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==Ir(),!(n=u.XMLHttpRequest||n&&a.Z.INTERNAL.node&&a.Z.INTERNAL.node.XMLHttpRequest)&&!Cr())throw new N("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Cr()?this.f=new ya(self):Tr()?this.f=new Ja(n):this.f=new ea,this.b=null}T(Xa,L),T(Ja,Jo),Ja.prototype.a=function(){return new this.f},Ja.prototype.b=function(){return{}};var Za,ts="idToken",es=new Br(3e4,6e4),ns={"Content-Type":"application/x-www-form-urlencoded"},rs=new Br(3e4,6e4),is={"Content-Type":"application/json"};function os(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function as(t,e){e&&(t.l=ss("https://securetoken.googleapis.com/v1/token",e),t.h=ss("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=ss("https://identitytoolkit.googleapis.com/v2/",e))}function ss(t,e){return t=Wn(t),e=Wn(e.url),t.c=t.a+t.c,Fn(t,e.f),t.a=e.a,Mn(t,e.g),t.toString()}function us(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function cs(t,e,n,r,i,o,a){(function(){var t=Rr();return!((t=Ar(t)!=Nr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Xt&&ue&&!(9<ue))})()||Cr()?t=E(t.u,t):(Za||(Za=new Ee((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(u[ls]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){ja(t,null,e,void 0)}(Qa(At(hs,{onload:ls})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=E(t.s,t)),t(e,n,r,i,o,a)}$a.prototype.S=function(){return this.b},$a.prototype.u=function(t,e,n,r,i,o){if(Cr()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new N("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new Ea(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}In(a,"complete",(function(){s&&clearTimeout(s);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return va(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),Tn(a,"ready",(function(){s&&clearTimeout(s),Ge(this)})),Tn(a,"timeout",(function(){s&&clearTimeout(s),Ge(this),e&&e(null)})),function(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.G=!1,t.c=!0,t.a=t.O?t.O.a():Ko.a(),t.A=t.O?$o(t.O):$o(Ko),t.a.onreadystatechange=E(t.Ub,t);try{va(t.b,xa(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return va(t.b,xa(t,"Error opening Xhr: "+e.message)),void Na(t,e)}e=r||"";var o=new Rn(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(d(t)||"string"==typeof t)Q(t,e,void 0);else for(var n=kn(t),r=Pn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=Sa,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),r=u.FormData&&e instanceof u.FormData,!Y(Ta,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Ra(t),0<t.g&&(t.u=function(t){return Xt&&se(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),va(t.b,xa(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=E(t.Ma,t)):t.s=Nn(t.Ma,t.g,t)),va(t.b,xa(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){va(t.b,xa(t,"Send error: "+e.message)),Na(t,e)}}(a,t,n,r,i)};var hs=new bt(It,"https://apis.google.com/js/client.js?onload=%{onload}"),ls="__fcb"+Math.floor(1e6*Math.random()).toString();function ps(t){if("string"!=typeof(t=t.email)||!_r.test(t))throw new N("invalid-email")}function fs(t){"email"in t&&ps(t)}function ds(t){if(!t[ts]){if(t.mfaPendingCredential)throw new N("multi-factor-auth-required",null,yt(t));throw new N("internal-error")}}function vs(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new N("internal-error")}else{if(!t.sessionInfo)throw new N("missing-verification-id");if(!t.code)throw new N("missing-verification-code")}}$a.prototype.s=function(t,e,n,r,i){var o=this;Za.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})})).o((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},$a.prototype.yb=function(){return iu(this,Ks,{})},$a.prototype.Ab=function(t,e){return iu(this,Bs,{idToken:t,email:e})},$a.prototype.Bb=function(t,e){return iu(this,Qs,{idToken:t,password:e})};var ys={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function gs(t){if(!t.phoneVerificationInfo)throw new N("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new N("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new N("missing-verification-code")}function ms(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new N("internal-error")}function _s(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&er(t=new Jn(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function bs(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Xo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Xo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Xo(t)):t.errorMessage&&(e=ou(t.errorMessage)),e)throw e;ds(t)}function ws(t,e){return e.returnIdpCredential=!0,iu(t,Ys,e)}function Es(t,e){return e.returnIdpCredential=!0,iu(t,Js,e)}function Cs(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,iu(t,Xs,e)}function Is(t){if(!t.oobCode)throw new N("invalid-action-code")}(t=$a.prototype).Cb=function(t,e){var n={idToken:t},r=[];return dt(ys,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),iu(this,Bs,n)},t.ub=function(t,e){return mt(t={requestType:"PASSWORD_RESET",email:t},e),iu(this,Us,t)},t.vb=function(t,e){return mt(t={requestType:"EMAIL_SIGNIN",email:t},e),iu(this,Fs,t)},t.tb=function(t,e){return mt(t={requestType:"VERIFY_EMAIL",idToken:t},e),iu(this,Ms,t)},t.Db=function(t,e,n){return mt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),iu(this,js,t)},t.eb=function(t){return iu(this,tu,t)},t.mb=function(t,e){return iu(this,qs,{oobCode:t,newPassword:e})},t.Qa=function(t){return iu(this,Ss,{oobCode:t})},t.ib=function(t){return iu(this,Ts,{oobCode:t})};var Ts={endpoint:"setAccountInfo",B:Is,Z:"email",C:!0},Ss={endpoint:"resetPassword",B:Is,F:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new N("internal-error")},C:!0},Ns={endpoint:"signupNewUser",B:function(t){if(ps(t),!t.password)throw new N("weak-password")},F:ds,U:!0,C:!0},As={endpoint:"createAuthUri",C:!0},Ps={endpoint:"deleteAccount",M:["idToken"]},ks={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(t){if(!Array.isArray(t.deleteProvider))throw new N("internal-error")}},Rs={endpoint:"emailLinkSignin",M:["email","oobCode"],B:ps,F:ds,U:!0,C:!0},Ds={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:ps,F:ds,U:!0},Os={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:gs,F:ds,C:!0,Na:!0},xs={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:gs,F:ds,C:!0,Na:!0},Ls={endpoint:"getAccountInfo"},Fs={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new N("internal-error");ps(t)},Z:"email",C:!0},Ms={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new N("internal-error")},Z:"email",C:!0},js={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new N("internal-error")},Z:"email",C:!0},Us={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new N("internal-error");ps(t)},Z:"email",C:!0},Vs={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},Ws={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(t){if(!t.recaptchaSiteKey)throw new N("internal-error")}},qs={endpoint:"resetPassword",B:Is,Z:"email",C:!0},Hs={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},Bs={endpoint:"setAccountInfo",M:["idToken"],B:fs,U:!0},Qs={endpoint:"setAccountInfo",M:["idToken"],B:function(t){if(fs(t),!t.password)throw new N("weak-password")},F:ds,U:!0},Ks={endpoint:"signupNewUser",F:ds,U:!0,C:!0},Gs={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(t){if(!t.phoneEnrollmentInfo)throw new N("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new N("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new N("missing-app-credential")},F:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new N("internal-error")},C:!0,Na:!0},zs={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new N("missing-app-credential")},F:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new N("internal-error")},C:!0,Na:!0},Ys={endpoint:"verifyAssertion",B:ms,Xa:_s,F:bs,U:!0,C:!0},Xs={endpoint:"verifyAssertion",B:ms,Xa:_s,F:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new N("user-not-found");if(t.errorMessage)throw ou(t.errorMessage);ds(t)},U:!0,C:!0},Js={endpoint:"verifyAssertion",B:function(t){if(ms(t),!t.idToken)throw new N("internal-error")},Xa:_s,F:bs,U:!0},$s={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new N("invalid-custom-token")},F:ds,U:!0,C:!0},Zs={endpoint:"verifyPassword",B:function(t){if(ps(t),!t.password)throw new N("wrong-password")},F:ds,U:!0,C:!0},tu={endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},eu={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new N("internal-error");vs(t)},F:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Xo(t);ds(t)}},nu={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},ru={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(t){if(!!t[ts]^!!t.refreshToken)throw new N("internal-error")},C:!0,Na:!0};function iu(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return ke(new N("internal-error"));var r,i=!!e.Na,o=e.Tb||"POST";return Pe(n).then(e.B).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,r,i,o,a){var s=Wn(e+n);Un(s,"key",t.c),a&&Un(s,"cb",I().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&Un(s,c,i[c]);return new Ee((function(e,n){cs(t,s.toString(),(function(t){t?t.error?n(au(t,o||{})):e(t):n(new N("network-request-failed"))}),r,u?void 0:or(Ur(i)),t.a,t.m.get())}))}(t,i?t.i:t.h,e.endpoint,o,n,e.Gb,e.kb||!1)})).then((function(t){return r=t,e.Xa?e.Xa(n,r):r})).then(e.F).then((function(){if(!e.Z)return r;if(!(e.Z in r))throw new N("internal-error");return r[e.Z]}))}function ou(t){return au({error:{errors:[{message:t}],code:400,message:t}})}function au(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new N(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",mt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new N(r[i],e);return!e&&t&&(e=jr(t)),new N("internal-error",e)}function su(t){this.b=t,this.a=null,this.qb=function(t){return(lu||(lu=new Ee((function(t,e){function n(){Hr(),Dr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Hr(),e(Error("Network Error"))},timeout:cu.get()})}if(Dr("gapi.iframes.Iframe"))t();else if(Dr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){Dr("gapi.load")?n():e(Error("Network Error"))},Pe(Qa(r=At(uu,{onload:r}))).o((function(){e(Error("Network Error"))}))}})).o((function(t){throw lu=null,t})))).then((function(){return new Ee((function(e,n){Dr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),hu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var uu=new bt(It,"https://apis.google.com/js/api.js?onload=%{onload}"),cu=new Br(3e4,6e4),hu=new Br(5e3,15e3),lu=null;function pu(t,e,n,r){this.l=t,this.h=e,this.i=n,this.g=r,this.f=null,t=this.g?qn((t=Wn(this.g.url)).f,t.a,t.g,"/emulator/auth/iframe"):qn("https",this.l,null,"/__/auth/iframe"),this.a=t,Un(this.a,"apiKey",this.h),Un(this.a,"appName",this.i),this.b=null,this.c=[]}function fu(t,e,n,r,i,o){this.u=t,this.s=e,this.c=n,this.v=r,this.m=o,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function du(t){try{return a.Z.app(t).auth().Ga()}catch(t){return[]}}function vu(t,e,n,r,i,o){this.s=t,this.g=e,this.b=n,this.f=o,this.c=r||null,this.i=i||null,this.l=this.u=this.A=null,this.h=[],this.v=this.a=null}function yu(t){var e=pr();return function(t){return iu(t,Vs,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Wn(e),r=n.f;n=n.a;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Wn(o).a==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:mr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new zo(pr())}))}function gu(t){return t.v||(t.v=br().then((function(){if(!t.u){var e=t.c,n=t.i,r=du(t.b),i=new pu(t.s,t.g,t.b,t.f);i.f=e,i.b=n,i.c=Z(r||[]),t.u=i.toString()}t.m=new su(t.u),function(t){if(!t.m)throw Error("IfcHandler must be initialized!");!function(t,e){t.qb.then((function(){t.a.register("authEvent",e,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.m,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Bo(e.authEvent),n=0;n<t.h.length;n++)r=t.h[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Pe(n)}return n.status="ERROR",Pe(n)}))}(t)}))),t.v}function mu(t){return t.l||(t.A=t.c?kr(t.c,du(t.b)):null,t.l=new $a(t.g,O(t.i),t.A),t.f&&as(t.l,t.f)),t.l}function _u(t,e,n,r,i,o,a,s,u,c,h,l){return(t=new fu(t,e,n,r,i,l)).l=o,t.g=a,t.i=s,t.b=yt(u||null),t.f=c,t.xb(h).toString()}function bu(t){if(this.a=t||a.Z.INTERNAL.reactNative&&a.Z.INTERNAL.reactNative.AsyncStorage,!this.a)throw new N("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function wu(t){this.b=t,this.a={},this.f=E(this.c,this)}pu.prototype.toString=function(){return this.f?Un(this.a,"v",this.f):tr(this.a.b,"v"),this.b?Un(this.a,"eid",this.b):tr(this.a.b,"eid"),this.c.length?Un(this.a,"fw",this.c.join(",")):tr(this.a.b,"fw"),this.a.toString()},fu.prototype.xb=function(t){return this.h=t,this},fu.prototype.toString=function(){if(this.m){var t=Wn(this.m.url);t=qn(t.f,t.a,t.g,"/emulator/auth/handler")}else t=qn("https",this.u,null,"/__/auth/handler");if(Un(t,"apiKey",this.s),Un(t,"appName",this.c),Un(t,"authType",this.v),this.a.isOAuthProvider){var e=this.a;try{var n=a.Z.app(this.c).auth().ka()}catch(t){n=null}for(var r in e.nb=n,Un(t,"providerId",this.a.providerId),e=Ur((n=this.a).Hb))e[r]=e[r].toString();r=n.Pc,e=yt(e);for(var i=0;i<r.length;i++){var o=r[i];o in e&&delete e[o]}n.ob&&n.nb&&!e[n.ob]&&(e[n.ob]=n.nb),vt(e)||Un(t,"customParameters",jr(e))}if("function"==typeof this.a.Pb&&(n=this.a.Pb()).length&&Un(t,"scopes",n.join(",")),this.l?Un(t,"redirectUrl",this.l):tr(t.b,"redirectUrl"),this.g?Un(t,"eventId",this.g):tr(t.b,"eventId"),this.i?Un(t,"v",this.i):tr(t.b,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Vn(t,s)&&Un(t,s,this.b[s]);return this.h?Un(t,"tid",this.h):tr(t.b,"tid"),this.f?Un(t,"eid",this.f):tr(t.b,"eid"),(s=du(this.c)).length&&Un(t,"fw",s.join(",")),t.toString()},(t=vu.prototype).Nb=function(t,e,n){var r=new N("popup-closed-by-user"),i=new N("web-storage-unsupported"),o=this,a=!1;return this.la().then((function(){(function(t){var e={type:"webStorageSupport"};return gu(t).then((function(){return function(t,e){return t.qb.then((function(){return new Ee((function(n){t.a.send(e.type,e,n,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.m,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&yr(t),e(i),a=!0)}))})).o((function(){})).then((function(){if(!a)return function(t){return new Ee((function(e){return function n(){An(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!a)return An(n).then((function(){e(r)}))}))},t.Wb=function(){var t=Rr();return!Mr(t)&&!qr(t)},t.Sb=function(){return!1},t.Lb=function(t,e,n,r,i,o,a,s){if(!t)return ke(new N("popup-blocked"));if(a&&!Mr())return this.la().o((function(e){yr(t),i(e)})),r(),Pe();this.a||(this.a=yu(mu(this)));var u=this;return this.a.then((function(){var e=u.la().o((function(e){throw yr(t),i(e),e}));return r(),e})).then((function(){qo(n),a||fr(_u(u.s,u.g,u.b,e,n,null,o,u.c,void 0,u.i,s,u.f),t)})).o((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Mb=function(t,e,n,r){this.a||(this.a=yu(mu(this)));var i=this;return this.a.then((function(){qo(e),fr(_u(i.s,i.g,i.b,t,e,pr(),n,i.c,void 0,i.i,r,i.f))})).o((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},t.la=function(){var t=this;return gu(this).then((function(){return t.m.qb})).o((function(){throw t.a=null,new N("network-request-failed")}))},t.Zb=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ra=function(t){J(this.h,(function(e){return e==t}))},(t=bu.prototype).get=function(t){return Pe(this.a.getItem(t)).then((function(t){return t&&Vr(t)}))},t.set=function(t,e){return Pe(this.a.setItem(t,jr(e)))},t.T=function(t){return Pe(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Eu,Cu=[];function Iu(t,e,n){vt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Tu(t){this.a=t}function Su(t){this.c=t,this.b=!1,this.a=[]}function Nu(t,e,n,r){var i,o,a,s,u=n||{},c=null;if(t.b)return ke(Error("connection_unavailable"));var h=r?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Ee((function(n,r){l?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:l,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},t.a.push(c),l.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[l.port2])):r(Error("connection_unavailable"))})).then((function(e){return Au(t,c),e})).o((function(e){throw Au(t,c),e}))}function Au(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),J(t.a,(function(t){return t==e}))}}function Pu(){if(!Ou())throw new N("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.v=u.indexedDB,this.type="indexedDB",this.g=this.m=this.f=this.l=null,this.s=!1,this.h=null;var t=this;Cr()&&self?(this.m=function(){var t=Cr()?self:null;if(Q(Cu,(function(n){n.b==t&&(e=n)})),!e){var e=new wu(t);Cu.push(e)}return e}(),Iu(this.m,"keyChanged",(function(e,n){return ju(t).then((function(e){return 0<e.length&&Q(t.a,(function(t){t(e)})),{keyProcessed:Y(e,n.key)}}))})),Iu(this.m,"ping",(function(){return Pe(["keyChanged"])}))):function(){var t=u.navigator;return t&&t.serviceWorker?Pe().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).o((function(){return null})):Pe(null)}().then((function(e){(t.h=e)&&(t.g=new Su(new Tu(e)),Nu(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&Y(e[0].value,"keyChanged")&&(t.s=!0)})).o((function(){})))}))}function ku(t){return new Ee((function(e,n){var r=t.v.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new Ee((function(e,n){var r=t.v.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return ku(t)})).then((function(t){e(t)})).o((function(t){n(t)}))}}))}function Ru(t){return t.i||(t.i=ku(t)),t.i}function Du(t,e){var n=0;return new Ee((function r(i,o){Ru(t).then(e).then(i).o((function(e){if(!(3<++n))return Ru(t).then((function(e){return e.close(),t.i=void 0,r(i,o)})).o((function(t){o(t)}));o(e)}))}))}function Ou(){try{return!!u.indexedDB}catch(t){return!1}}function xu(t){return t.objectStore("firebaseLocalStorage")}function Lu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Fu(t){return new Ee((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Mu(t,e){return t.g&&t.h&&function(){var t=u.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Nu(t.g,"keyChanged",{key:e},t.s).then((function(){})).o((function(){})):Pe()}function ju(t){return Ru(t).then((function(t){var e=xu(Lu(t,!1));return e.getAll?Fu(e.getAll()):new Ee((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=dr(t.c,n),t.c=n}return r}))}function Uu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Vu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Pe().then((function(){if(Ou()){var t=Wr(),r="__sak"+t;return Eu||(Eu=new Pu),(n=Eu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).o((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){Q(e.a,(function(e){e(t)}))})),t}))}function Wu(){this.a={},this.type="inMemory"}function qu(){if(!function(){var t="Node"==Ir();if(!(t=Hu()||t&&a.Z.INTERNAL.node&&a.Z.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Ir())throw new N("internal-error","The LocalStorage compatibility library was not found.");throw new N("web-storage-unsupported")}this.a=Hu()||a.Z.INTERNAL.node.localStorage,this.type="localStorage"}function Hu(){try{var t=u.localStorage,e=Wr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Bu(){this.type="nullStorage"}function Qu(){if(!function(){var t="Node"==Ir();if(!(t=Ku()||t&&a.Z.INTERNAL.node&&a.Z.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Ir())throw new N("internal-error","The SessionStorage compatibility library was not found.");throw new N("web-storage-unsupported")}this.a=Ku()||a.Z.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Ku(){try{var t=u.sessionStorage,e=Wr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Gu(){var t={};t.Browser=Xu,t.Node=Ju,t.ReactNative=$u,t.Worker=Zu,this.a=t[Ir()]}wu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];Q(r,(function(e){i.push(Pe().then((function(){return e(t.origin,t.data.data)})))})),De(i).then((function(r){var i=[];Q(r,(function(t){i.push({fulfilled:t.Ob,value:t.value,reason:t.reason?t.reason.message:void 0})})),Q(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},Tu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Su.prototype.close=function(){for(;0<this.a.length;)Au(this,this.a[0]);this.b=!0},(t=Pu.prototype).set=function(t,e){var n=this,r=!1;return Du(this,(function(e){return Fu((e=xu(Lu(e,!0))).get(t))})).then((function(i){return Du(n,(function(o){if(o=xu(Lu(o,!0)),i)return i.value=e,Fu(o.put(i));n.b++,r=!0;var a={};return a.fbase_key=t,a.value=e,Fu(o.add(a))}))})).then((function(){return n.c[t]=e,Mu(n,t)})).na((function(){r&&n.b--}))},t.get=function(t){return Du(this,(function(e){return Fu(xu(Lu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.T=function(t){var e=this,n=!1;return Du(this,(function(r){return n=!0,e.b++,Fu(xu(Lu(r,!0)).delete(t))})).then((function(){return delete e.c[t],Mu(e,t)})).na((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){Uu(t),function e(){t.f=setTimeout((function(){t.l=ju(t).then((function(e){0<e.length&&Q(t.a,(function(t){t(e)}))})).then((function(){e()})).o((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t})),0==this.a.length&&Uu(this)},(t=Vu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.T=function(t){return this.b.then((function(e){return e.T(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t}))},(t=Wu.prototype).get=function(t){return Pe(this.a[t])},t.set=function(t,e){return this.a[t]=e,Pe()},t.T=function(t){return delete this.a[t],Pe()},t.ca=function(){},t.ia=function(){},(t=qu.prototype).get=function(t){var e=this;return Pe().then((function(){return Vr(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Pe().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Pe().then((function(){e.a.removeItem(t)}))},t.ca=function(t){u.window&&ln(u.window,"storage",t)},t.ia=function(t){u.window&&dn(u.window,"storage",t)},(t=Bu.prototype).get=function(){return Pe(null)},t.set=function(){return Pe()},t.T=function(){return Pe()},t.ca=function(){},t.ia=function(){},(t=Qu.prototype).get=function(t){var e=this;return Pe().then((function(){return Vr(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Pe().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Pe().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var zu,Yu,Xu={D:qu,ab:Qu},Ju={D:qu,ab:Qu},$u={D:bu,ab:Bu},Zu={D:qu,ab:Bu},tc={qd:"local",NONE:"none",sd:"session"};function ec(){var t=!(qr(Rr())||!Er()),e=Mr(),n=Or();this.v=t,this.h=e,this.l=n,this.a={},zu||(zu=new Gu),t=zu;try{this.g=!lr()&&zr()||!u.indexedDB?new t.a.D:new Vu(Cr()?new Wu:new t.a.D)}catch(t){this.g=new Wu,this.h=!0}try{this.i=new t.a.ab}catch(t){this.i=new Wu}this.m=new Wu,this.f=E(this.Xb,this),this.b={}}function nc(){return Yu||(Yu=new ec),Yu}function rc(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function ic(t,e){return"firebase:"+t.name+(e?":"+e:"")}function oc(t,e,n){return n=ic(e,n),"local"==e.D&&(t.b[n]=null),rc(t,e.D).T(n)}function ac(t){t.c&&(clearInterval(t.c),t.c=null)}function sc(t){this.a=t,this.b=nc()}(t=ec.prototype).get=function(t,e){return rc(this,t.D).get(ic(t,e))},t.set=function(t,e,n){var r=ic(t,n),i=this,o=rc(this,t.D);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.D&&(i.b[r]=e)}))},t.addListener=function(t,e,n){t=ic(t,e),this.l&&(this.b[t]=u.localStorage.getItem(t)),vt(this.a)&&(rc(this,"local").ca(this.f),this.h||(lr()||!zr())&&u.indexedDB||!this.l||function(t){ac(t),t.c=setInterval((function(){for(var e in t.a){var n=u.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Ze({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Xb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=ic(t,e),this.a[t]&&(J(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),vt(this.a)&&(rc(this,"local").ia(this.f),ac(this))},t.Xb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.lb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?rc(this,"local").ia(this.f):ac(this),this.v)if(n=u.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?u.localStorage.setItem(e,r):u.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===u.localStorage.getItem(e)||(o.b[e]=u.localStorage.getItem(e),o.lb(e))},Xt&&ue&&10==ue&&u.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else Q(t,E(this.lb,this))},t.lb=function(t){this.a[t]&&Q(this.a[t],(function(t){t()}))};var uc,cc={name:"authEvent",D:"local"};function hc(){this.a=nc()}function lc(t,e){this.b=pc,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0===uc&&(uc=u.Int32Array?new Int32Array(_c):_c),this.reset()}T(lc,(function(){this.b=-1}));for(var pc=64,fc=pc-1,dc=[],vc=0;vc<fc;vc++)dc[vc]=0;var yc=$(128,dc);function gc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var p=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|uc[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+p|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function mc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(gc(t),i=0);else{if(!d(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(gc(t),i=0)}}t.c=i,t.g+=n}lc.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):Z(this.h)};var _c=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function bc(){lc.call(this,8,wc)}T(bc,lc);var wc=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Ec(t,e,n,r,i,o){this.m=t,this.i=e,this.l=n,this.v=r||null,this.u=i||null,this.s=o,this.h=e+":"+n,this.A=new hc,this.g=new sc(this.h),this.f=null,this.b=[],this.a=this.c=null}function Cc(t){return new N("invalid-cordova-configuration",t)}function Ic(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Tc(t){return t.f||(t.f=t.la().then((function(){return new Ee((function(e){t.Ea((function n(r){return e(r),t.Ra(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),Sc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=so(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Vr(Vn(o=Wn(i),"firebaseError")||null))?A(o):null)?new Ho(r.c,r.b,null,null,o,null,r.S()):new Ho(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}Ic(t,i)}))}var n=new Ho("unknown",null,null,null,new N("no-auth-event")),r=!1,i=An(500).then((function(){return Sc(t).then((function(){r||Ic(t,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Dr("BuildInfo.packageName",u).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Go||(Go=new Qo),function(t){var e=Go;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Dr("universalLinks.subscribe",u))&&t(null,e.b))}(e)}(t)}))}))),t.f}function Sc(t){var e=null;return function(t){return t.b.get(cc,t.a).then((function(t){return Bo(t)}))}(t.g).then((function(n){return e=n,oc((n=t.g).b,cc,n.a)})).then((function(){return e}))}function Nc(t){this.a=t,this.b=nc()}(t=Ec.prototype).la=function(){return this.Ia?this.Ia:this.Ia=(wr(void 0)?br().then((function(){return new Ee((function(t,e){var n=u.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):ke(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Dr("universalLinks.subscribe",u))throw Cc("cordova-universal-links-plugin-fix is not installed");if(void 0===Dr("BuildInfo.packageName",u))throw Cc("cordova-plugin-buildinfo is not installed");if("function"!=typeof Dr("cordova.plugins.browsertab.openUrl",u))throw Cc("cordova-plugin-browsertab is not installed");if("function"!=typeof Dr("cordova.InAppBrowser.open",u))throw Cc("cordova-plugin-inappbrowser is not installed")}),(function(){throw new N("cordova-not-ready")}))},t.Nb=function(t,e){return e(new N("operation-not-supported-in-this-environment")),Pe()},t.Lb=function(){return ke(new N("operation-not-supported-in-this-environment"))},t.Zb=function(){return!1},t.Wb=function(){return!0},t.Sb=function(){return!0},t.Mb=function(t,e,n,r){if(this.c)return ke(new N("redirect-operation-pending"));var i=this,o=u.document,a=null,s=null,c=null,h=null;return this.c=Pe().then((function(){return qo(e),Tc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Ho(e,r,null,o,new N("no-auth-event"),null,i),s=Dr("BuildInfo.packageName",u);if("string"!=typeof s)throw new N("invalid-cordova-configuration");var c=Dr("BuildInfo.displayName",u),h={};if(Rr().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=s;else{if(!Rr().toLowerCase().match(/android/))return ke(new N("operation-not-supported-in-this-environment"));h.apn=s}c&&(h.appDisplayName=c),o=function(t){var e=new bc;mc(e,t),t=[];var n=8*e.g;56>e.c?mc(e,yc,56-e.c):mc(e,yc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(gc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return G(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),h.sessionId=o;var l=_u(t.m,t.i,t.l,e,n,null,r,t.v,h,t.u,i,t.s);return t.la().then((function(){var e=t.h;return t.A.a.set(cc,a.w(),e)})).then((function(){var e=Dr("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof e)throw new N("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Dr("cordova.plugins.browsertab.openUrl",u)))throw new N("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=Dr("cordova.InAppBrowser.open",u)))throw new N("invalid-cordova-configuration");e=Rr(),t.a=n(l,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new Ee((function(t,e){s=function(){var e=Dr("cordova.plugins.browsertab.close",u);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ea(s),c=function(){a||(a=An(2e3).then((function(){e(new N("redirect-cancelled-by-user"))})))},h=function(){Qr()&&c()},o.addEventListener("resume",c,!1),Rr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).o((function(t){return Sc(i).then((function(){throw t}))}))})).na((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),a&&a.cancel(),s&&i.Ra(s),i.c=null}))},t.Ea=function(t){this.b.push(t),Tc(this).o((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Ho("unknown",null,null,null,new N("no-auth-event")),t(e))}))},t.Ra=function(t){J(this.b,(function(e){return e==t}))};var Ac={name:"pendingRedirect",D:"session"};function Pc(t){return oc(t.b,Ac,t.a)}function kc(t,e,n,r){this.i={},this.u=0,this.O=t,this.m=e,this.v=n,this.G=r,this.h=[],this.f=!1,this.l=E(this.s,this),this.b=new Qc,this.A=new Xc,this.g=new Nc(Hc(this.m,this.v)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.A,this.c.linkViaPopup=this.A,this.c.reauthViaPopup=this.A,this.a=Rc(this.O,this.m,this.v,P,this.G)}function Rc(t,e,n,r,i){var o=a.Z.SDK_VERSION||null;return wr()?new Ec(t,e,n,o,r,i):new vu(t,e,n,o,r,i)}function Dc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.la().o((function(n){throw t.a==e&&t.reset(),n}))}function Oc(t){t.a.Wb()&&Dc(t).o((function(e){var n=new Ho("unknown",null,null,null,new N("operation-not-supported-in-this-environment"));Uc(e)&&t.s(n)})),t.a.Sb()||Kc(t.b)}function xc(t,e){Y(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(Ac,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Pc(t.g).then((function(){Dc(t).o((function(e){var n=new Ho("unknown",null,null,null,new N("operation-not-supported-in-this-environment"));Uc(e)&&t.s(n)}))})):Oc(t)})).o((function(){Oc(t)}))}function Lc(t,e){J(t.h,(function(t){return t==e}))}kc.prototype.reset=function(){this.f=!1,this.a.Ra(this.l),this.a=Rc(this.O,this.m,this.v,null,this.G),this.i={}},kc.prototype.s=function(t){if(!t)throw new N("invalid-auth-event");if(6e5<=I()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Eb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=I())),e=!0;break}}return Kc(this.b),e};var Fc=new Br(2e3,1e4),Mc=new Br(3e4,6e4);function jc(t,e,n,r,i,o,a){return t.a.Lb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),i,o,a)}function Uc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Vc(t,e,n,r,i){var o;return function(t){return t.b.set(Ac,"pending",t.a)}(t.g).then((function(){return t.a.Mb(e,n,r,i).o((function(e){if(Uc(e))throw new N("operation-not-supported-in-this-environment");return o=e,Pc(t.g).then((function(){throw o}))})).then((function(){return t.a.Zb()?new Ee((function(){})):Pc(t.g).then((function(){return t.qa()})).then((function(){})).o((function(){}))}))}))}function Wc(t,e,n,r,i){return t.a.Nb(r,(function(t){e.ma(n,null,t,i)}),Fc.get())}kc.prototype.qa=function(){return this.b.qa()};var qc={};function Hc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function Bc(t,e,n,r){var i=Hc(e,n,r);return qc[i]||(qc[i]=new kc(t,e,n,r)),qc[i]}function Qc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Kc(t){t.g||(t.g=!0,Yc(t,!1,null,null))}function Gc(t){t.g&&!t.i&&Yc(t,!1,null,null)}function zc(t,e){if(t.b=function(){return Pe(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Yc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return ke(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):zc(t,n):zc(t,{user:null}),t.f=[],t.c=[]}function Xc(){}function Jc(){this.hb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(t){this.hb=t},enumerable:!1})}function $c(t,e){this.a=e,Zr(this,"verificationId",t)}function Zc(t,e,n,r){return new Uo(t).eb(e,n).then((function(t){return new $c(t,r)}))}function th(t){var e=Gi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new N("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");ti(this,{token:t,expirationTime:Gr(1e3*e.exp),authTime:Gr(1e3*e.auth_time),issuedAtTime:Gr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function eh(t,e,n){var r=e&&e[rh];if(!r)throw new N("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=yt(e),this.g=n,this.c=new uo(null,r),this.b=[];var i=this;Q(e[nh]||[],(function(t){(t=ii(t))&&i.b.push(t)})),Zr(this,"auth",this.a),Zr(this,"session",this.c),Zr(this,"hints",this.b)}Qc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Qc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Yc(this,!0,null,t.a),Pe()):e.Fa(n,r)?function(t,e,n){n=n.Fa(e.c,e.b);var r=e.g,i=e.f,o=e.i,a=e.S(),s=!!e.c.match(/Redirect$/);n(r,i,a,o).then((function(e){Yc(t,s,e,null)})).o((function(e){Yc(t,s,null,e)}))}(this,t,e):ke(new N("invalid-auth-event")):(Yc(this,!1,null,null),Pe())}else ke(new N("invalid-auth-event"))},Qc.prototype.qa=function(){var t=this;return new Ee((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new N("timeout");t.a&&t.a.cancel(),t.a=An(Mc.get()).then((function(){t.b||(t.g=!0,Yc(t,!0,null,e))}))}(t))}))},Xc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.ma(t.c,null,t.a,t.b),Pe()):e.Fa(n,r)?function(t,e){var n=t.b,r=t.c;e.Fa(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.ma(r,t,null,n)})).o((function(t){e.ma(r,null,t,n)}))}(t,e):ke(new N("invalid-auth-event"))}else ke(new N("invalid-auth-event"))},$c.prototype.confirm=function(t){return t=Vo(this.verificationId,t),this.a(t)};var nh="mfaInfo",rh="mfaPendingCredential";function ih(t,e,n,r){N.call(this,"multi-factor-auth-required",r,e),this.b=new eh(t,e,n),Zr(this,"resolver",this.b)}function oh(t,e,n){if(t&&y(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new ih(e,t.serverResponse,n,t.message)}catch(t){}return null}function ah(){}function sh(t){Zr(this,"factorId",t.fa),this.a=t}function uh(t){if(sh.call(this,t),this.a.fa!=Uo.PROVIDER_ID)throw new N("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function ch(t,e){for(var n in $e.call(this,t),e)this[n]=e[n]}function hh(t,e){this.a=t,this.b=[],this.c=E(this.xc,this),ln(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&Q(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[si]=t.uid),t.displayName&&(r[oi]=t.displayName),t.enrollmentTime&&(r[ai]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ui]=t.phoneNumber);try{e=new ci(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),lh(this,n)}function lh(t,e){t.b=e,Zr(t,"enrolledFactors",e)}function ph(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function fh(t,e){t.stop(),t.b=An(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=u.document,e=null;return Qr()||!t?Pe():new Ee((function(n){e=function(){Qr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).o((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){fh(t,!0)})).o((function(e){t.i(e)&&fh(t,!1)}))}function dh(t){this.c=t,this.b=this.a=null}function vh(t){return t.b&&1e3*t.b.c||0}function yh(t,e){var n=e.refreshToken;t.b=Ki(e[ts]||""),t.a=n}function gh(t,e){this.a=t||null,this.b=e||null,ti(this,{lastSignInTime:Gr(e||null),creationTime:Gr(t||null)})}function mh(t,e,n,r,i,o){ti(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function _h(t,e,n){this.G=[],this.l=t.apiKey,this.m=t.appName,this.s=t.authDomain||null;var r=a.Z.SDK_VERSION?kr(a.Z.SDK_VERSION):null;this.a=new $a(this.l,O(P),r),t.emulatorConfig&&as(this.a,t.emulatorConfig),this.b=new dh(this.a),Nh(this,e[ts]),yh(this.b,e),Zr(this,"refreshToken",this.b.a),kh(this,n||{}),Cn.call(this),this.P=!1,this.s&&xr()&&(this.i=Bc(this.s,this.l,this.m)),this.R=[],this.f=null,this.u=function(t){return new ph((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=vh(t.b)-I()-3e5;return 0<e?e:0}))}(this),this.$=E(this.gb,this);var i=this;this.pa=null,this.Ba=function(t){i.wa(t.h)},this.ba=null,this.za=function(t){as(i.a,t.c)},this.W=null,this.X=[],this.Aa=function(t){Eh(i,t.f)},this.aa=null,this.N=new hh(this,n),Zr(this,"multiFactor",this.N)}function bh(t,e){t.ba&&dn(t.ba,"languageCodeChanged",t.Ba),(t.ba=e)&&ln(e,"languageCodeChanged",t.Ba)}function wh(t,e){t.W&&dn(t.W,"emulatorConfigChanged",t.za),(t.W=e)&&ln(e,"emulatorConfigChanged",t.za)}function Eh(t,e){t.X=e,us(t.a,a.Z.SDK_VERSION?kr(a.Z.SDK_VERSION,t.X):null)}function Ch(t,e){t.aa&&dn(t.aa,"frameworkChanged",t.Aa),(t.aa=e)&&ln(e,"frameworkChanged",t.Aa)}function Ih(t){try{return a.Z.app(t.m).auth()}catch(e){throw new N("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Th(t){t.A||t.u.b||(t.u.start(),dn(t,"tokenChanged",t.$),ln(t,"tokenChanged",t.$))}function Sh(t){dn(t,"tokenChanged",t.$),t.u.stop()}function Nh(t,e){t.ya=e,Zr(t,"_lat",e)}function Ah(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return De(e).then((function(){return t}))}function Ph(t){t.i&&!t.P&&(t.P=!0,xc(t.i,t))}function kh(t,e){ti(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new gh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Rh(){}function Dh(t){return Pe().then((function(){if(t.A)throw new N("app-deleted")}))}function Oh(t){return G(t.providerData,(function(t){return t.providerId}))}function xh(t,e){e&&(Lh(t,e.providerId),t.providerData.push(e))}function Lh(t,e){J(t.providerData,(function(t){return t.providerId==e}))}function Fh(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Zr(t,e,n)}function Mh(t,e){t!=e&&(ti(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Zr(t,"metadata",function(t){return new gh(t.a,t.b)}(e.metadata)):Zr(t,"metadata",new gh),Q(e.providerData,(function(e){xh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Zr(t,"refreshToken",t.b.a),lh(t.N,e.N.b))}function jh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return iu(t.a,Ls,{idToken:e}).then(E(t.Jc,t))}(t,e).then((function(){return n||Fh(t,"isAnonymous",!1),e}))}))}function Uh(t,e){e[ts]&&t.ya!=e[ts]&&(yh(t.b,e),t.dispatchEvent(new ch("tokenChanged")),Nh(t,e[ts]),Fh(t,"refreshToken",t.b.a))}function Vh(t,e){return jh(t).then((function(){if(Y(Oh(t),e))return Ah(t).then((function(){throw new N("provider-already-linked")}))}))}function Wh(t,e,n){return ei({user:t,credential:Wo(e),additionalUserInfo:e=$i(e),operationType:n})}function qh(t,e){return Uh(t,e),t.reload().then((function(){return t}))}function Hh(t,e,n,r,i){if(!xr())return ke(new N("operation-not-supported-in-this-environment"));if(t.f&&!i)return ke(t.f);var o=Ji(n.providerId),s=Wr(t.uid+":::"),u=null;(!Mr()||Er())&&t.s&&n.isOAuthProvider&&(u=_u(t.s,t.l,t.m,e,n,null,s,a.Z.SDK_VERSION||null,null,null,t.tenantId));var c=gr(u,o&&o.ua,o&&o.ta);return r=r().then((function(){if(Qh(t),!i)return t.I().then((function(){}))})).then((function(){return jc(t.i,c,e,n,s,!!u,t.tenantId)})).then((function(){return new Ee((function(n,r){t.ma(e,null,new N("cancelled-popup-request"),t.h||null),t.g=n,t.O=r,t.h=s,t.c=Wc(t.i,t,e,c,s)}))})).then((function(t){return c&&yr(c),t?ei(t):null})).o((function(t){throw c&&yr(c),t})),Kh(t,r,i)}function Bh(t,e,n,r,i){if(!xr())return ke(new N("operation-not-supported-in-this-environment"));if(t.f&&!i)return ke(t.f);var o=null,a=Wr(t.uid+":::");return r=r().then((function(){if(Qh(t),!i)return t.I().then((function(){}))})).then((function(){return t.ga=a,Ah(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(Yh,t.w(),e.a)),e})).then((function(){return Vc(t.i,e,n,a,t.tenantId)})).o((function(e){if(o=e,t.ha)return Xh(t.ha);throw o})).then((function(){if(o)throw o})),Kh(t,r,i)}function Qh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new N("internal-error");throw new N("auth-domain-config-required")}}function Kh(t,e,n){var r=function(t,e,n){return t.f&&!n?(e.cancel(),ke(t.f)):e.o((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.f||t.dispatchEvent(new ch("userInvalidated")),t.f=e),e}))}(t,e,n);return t.G.push(r),r.na((function(){X(t.G,r)})),r.o((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),Ih(t),E(t.ic,t))),n||e}))}function Gh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[ts]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new _h(e,n,t);return t.providerData&&Q(t.providerData,(function(t){t&&xh(r,ei(t))})),t.redirectEventId&&(r.ga=t.redirectEventId),r}function zh(t){this.a=t,this.b=nc()}eh.prototype.Qc=function(t){var e=this;return t.rb(this.a.a,this.c).then((function(t){var n=yt(e.f);return delete n[nh],delete n[rh],mt(n,t),e.g(n)}))},T(ih,N),ah.prototype.rb=function(t,e,n){return e.type==co?function(t,e,n,r){return n.Ha().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),mt(n,{phoneVerificationInfo:jo(t.a)}),iu(e,Os,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return mt(n={mfaPendingCredential:n},{phoneVerificationInfo:jo(t.a)}),iu(e,xs,n)}))}(this,t,e)},T(sh,ah),T(uh,sh),T(ch,$e),(t=hh.prototype).xc=function(t){lh(this,function(t){var e=[];return Q(t.mfaInfo||[],(function(t){(t=ii(t))&&e.push(t)})),e}(t.gd))},t.Qb=function(){return this.a.I().then((function(t){return new uo(t,null)}))},t.ec=function(t,e){var n=this,r=this.a.a;return this.Qb().then((function(n){return t.rb(r,n,e)})).then((function(t){return Uh(n.a,t),n.a.reload()}))},t.ad=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return iu(r,ru,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=K(e.b,(function(t){return t.uid!=n}));return lh(e,r),Uh(e.a,t),e.a.reload().o((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:G(this.b,(function(t){return t.w()}))}}},ph.prototype.start=function(){this.a=this.c,fh(this,!0)},ph.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},dh.prototype.w=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:vh(this)}},dh.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?ke(new N("user-token-expired")):t||!this.b||I()>vh(this)-3e4?this.a?function(t,e){return function(t,e){return new Ee((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?cs(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(au(t)):t.access_token&&t.refresh_token?n(t):r(new N("internal-error")):r(new N("network-request-failed"))}),"POST",Zn(e).toString(),t.g,t.v.get()):r(new N("internal-error"))}))}(t.c,e).then((function(e){return t.b=Ki(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).o((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Pe(null):Pe({accessToken:this.b.toString(),refreshToken:this.a})},gh.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},T(_h,Cn),_h.prototype.wa=function(t){this.pa=t,os(this.a,t)},_h.prototype.ka=function(){return this.pa},_h.prototype.Ga=function(){return Z(this.X)},_h.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start())},Zr(_h.prototype,"providerId","firebase"),(t=_h.prototype).reload=function(){var t=this;return Kh(this,Dh(this).then((function(){return jh(t).then((function(){return Ah(t)})).then(Rh)})))},t.nc=function(t){return this.I(t).then((function(t){return new th(t)}))},t.I=function(t){var e=this;return Kh(this,Dh(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new N("internal-error");return t.accessToken!=e.ya&&(Nh(e,t.accessToken),e.dispatchEvent(new ch("tokenChanged"))),Fh(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Jc=function(t){if(!(t=t.users)||!t.length)throw new N("internal-error");kh(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?G(t,(function(t){return new mh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)xh(this,e[n]);Fh(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new ch("userReloaded",{gd:t}))},t.Kc=function(t){return Jr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.sb(t)},t.sb=function(t){var e=this,n=null;return Kh(this,t.c(this.a,this.uid).then((function(t){return Uh(e,t),n=Wh(e,t,"reauthenticate"),e.f=null,e.reload()})).then((function(){return n})),!0)},t.Bc=function(t){return Jr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.pb(t)},t.pb=function(t){var e=this,n=null;return Kh(this,Vh(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Wh(e,t,"link"),qh(e,t)})).then((function(){return n})))},t.Cc=function(t,e){var n=this;return Kh(this,Vh(this,"phone").then((function(){return Zc(Ih(n),t,e,E(n.pb,n))})))},t.Lc=function(t,e){var n=this;return Kh(this,Pe().then((function(){return Zc(Ih(n),t,e,E(n.sb,n))})),!0)},t.Ab=function(t){var e=this;return Kh(this,this.I().then((function(n){return e.a.Ab(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.dd=function(t){var e=this;return Kh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Uh(e,t),e.reload()})))},t.Bb=function(t){var e=this;return Kh(this,this.I().then((function(n){return e.a.Bb(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.Cb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Dh(this);var e=this;return Kh(this,this.I().then((function(n){return e.a.Cb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Uh(e,t),Fh(e,"displayName",t.displayName||null),Fh(e,"photoURL",t.photoUrl||null),Q(e.providerData,(function(t){"password"===t.providerId&&(Zr(t,"displayName",e.displayName),Zr(t,"photoURL",e.photoURL))})),Ah(e)})).then(Rh))},t.bd=function(t){var e=this;return Kh(this,jh(this).then((function(n){return Y(Oh(e),t)?function(t,e,n){return iu(t,ks,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return Q(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),Q(Oh(e),(function(t){n[t]||Lh(e,t)})),n[Uo.PROVIDER_ID]||Zr(e,"phoneNumber",null),Ah(e)})):Ah(e).then((function(){throw new N("no-such-provider")}))})))},t.delete=function(){var t=this;return Kh(this,this.I().then((function(e){return iu(t.a,Ps,{idToken:e})})).then((function(){t.dispatchEvent(new ch("userDeleted"))}))).then((function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");bh(t,null),wh(t,null),Ch(t,null),t.G=[],t.A=!0,Sh(t),Zr(t,"refreshToken",null),t.i&&Lc(t.i,t)}))},t.Eb=function(t,e){return!!("linkViaPopup"==t&&(this.h||null)==e&&this.g||"reauthViaPopup"==t&&(this.h||null)==e&&this.g||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.ma=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.h||null)||(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.h||null)?E(this.Jb,this):"reauthViaPopup"==t&&e==(this.h||null)?E(this.Kb,this):"linkViaRedirect"==t&&(this.ga||null)==e?E(this.Jb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?E(this.Kb,this):null},t.Dc=function(t){var e=this;return Hh(this,"linkViaPopup",t,(function(){return Vh(e,t.providerId).then((function(){return Ah(e)}))}),!1)},t.Mc=function(t){return Hh(this,"reauthViaPopup",t,(function(){return Pe()}),!0)},t.Ec=function(t){var e=this;return Bh(this,"linkViaRedirect",t,(function(){return Vh(e,t.providerId)}),!1)},t.Nc=function(t){return Bh(this,"reauthViaRedirect",t,(function(){return Pe()}),!0)},t.Jb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Kh(this,this.I().then((function(n){return Es(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=Wh(i,t,"link"),qh(i,t)})).then((function(){return o})))},t.Kb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Kh(this,Pe().then((function(){return po(Cs(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=Wh(i,t,"reauthenticate"),Uh(i,t),i.f=null,i.reload()})).then((function(){return o})),!0)},t.tb=function(t){var e=this,n=null;return Kh(this,this.I().then((function(e){return n=e,void 0===t||vt(t)?{}:Hi(new Oi(t))})).then((function(t){return e.a.tb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Db=function(t,e){var n=this,r=null;return Kh(this,this.I().then((function(t){return r=t,void 0===e||vt(e)?{}:Hi(new Oi(e))})).then((function(e){return n.a.Db(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.ic=function(t){var e=null,n=this;return Kh(this,t=po(Pe(t),n.uid).then((function(t){return e=Wh(n,t,"reauthenticate"),Uh(n,t),n.f=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&mt(t,this.metadata.w()),Q(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),mt(t,this.N.w()),t};var Yh={name:"redirectUser",D:"session"};function Xh(t){return oc(t.b,Yh,t.a)}function Jh(t){this.a=t,this.b=nc(),this.c=null,this.f=function(t){var e=tl("local"),n=tl("session"),r=tl("none");return function(t,e,n){var r=ic(e,n),i=rc(t,e.D);return t.get(e,n).then((function(o){var a=null;try{a=Vr(u.localStorage.getItem(r))}catch(t){}if(a&&!o)return u.localStorage.removeItem(r),t.set(e,a,n);a&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Zh,t.a).then((function(t){return t?tl(t):e}))}))}))})).then((function(e){return t.c=e,$h(t,e.D)})).o((function(){t.c||(t.c=e)}))}(this),this.b.addListener(tl("local"),this.a,E(this.g,this))}function $h(t,e){var n,r=[];for(n in tc)tc[n]!==e&&r.push(oc(t.b,tl(tc[n]),t.a));return r.push(oc(t.b,Zh,t.a)),function(t){return new Ee((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)Re(t[s],C(o,s),a);else e(i)}))}(r)}Jh.prototype.g=function(){var t=this,e=tl("local");il(this,(function(){return Pe().then((function(){return t.c&&"local"!=t.c.D?t.b.get(e,t.a):null})).then((function(n){if(n)return $h(t,"local").then((function(){t.c=e}))}))}))};var Zh={name:"persistence",D:"session"};function tl(t){return{name:"authUser",D:t}}function el(t,e){return il(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function nl(t){return il(t,(function(){return oc(t.b,t.c,t.a)}))}function rl(t,e,n){return il(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),Gh(t||{})}))}))}function il(t,e){return t.f=t.f.then(e,e),t.f}function ol(t){if(this.m=!1,Zr(this,"settings",new Jc),Zr(this,"app",t),!fl(this).options||!fl(this).options.apiKey)throw new N("invalid-api-key");t=a.Z.SDK_VERSION?kr(a.Z.SDK_VERSION):null,this.a=new $a(fl(this).options&&fl(this).options.apiKey,O(P),t),this.R=[],this.u=[],this.P=[],this.ac=a.Z.INTERNAL.createSubscribe(E(this.yc,this)),this.X=void 0,this.bc=a.Z.INTERNAL.createSubscribe(E(this.zc,this)),ll(this,null),this.l=new Jh(fl(this).options.apiKey+":"+fl(this).name),this.G=new zh(fl(this).options.apiKey+":"+fl(this).name),this.$=gl(this,function(t){var e=fl(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Yh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Gh(t||{})}))}(t.G,fl(t).options.authDomain).then((function(e){return(t.s=e)&&(e.ha=t.G),Xh(t.G)}));return gl(t,e)}(t).then((function(){return rl(t.l,e,t.f)})).then((function(e){return e?(e.ha=t.G,t.s&&(t.s.ga||null)==(e.ga||null)?e:e.reload().then((function(){return el(t.l,e).then((function(){return e}))})).o((function(n){return"auth/network-request-failed"==n.code?e:nl(t.l)}))):null})).then((function(e){ll(t,e||null)}));return gl(t,n)}(this)),this.i=gl(this,function(t){return t.$.then((function(){return hl(t)})).o((function(){})).then((function(){if(!t.m)return t.pa()})).o((function(){})).then((function(){if(!t.m){t.ba=!0;var e=t.l;e.b.addListener(tl("local"),e.a,t.pa)}}))}(this)),this.ba=!1,this.pa=E(this.Yc,this),this.Ba=E(this.da,this),this.ya=E(this.kc,this),this.za=E(this.vc,this),this.Aa=E(this.wc,this),this.b=null,function(t){var e=fl(t).options.authDomain,n=fl(t).options.apiKey;e&&xr()&&(t.gb=t.$.then((function(){if(!t.m){if(t.b=Bc(e,n,fl(t).name,t.f),xc(t.b,t),dl(t)&&Ph(dl(t)),t.s){Ph(t.s);var r=t.s;r.wa(t.ka()),bh(r,t),Eh(r=t.s,t.N),Ch(r,t),as((r=t.s).a,t.f),wh(r,t),t.s=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=E(this.delete,this),this.INTERNAL.logFramework=E(this.Fc,this),this.A=0,Cn.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ka()},set:function(t){this.wa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.xb(t)},enumerable:!1}),t.W=null}(this),this.N=[],this.f=null}function al(t){$e.call(this,"languageCodeChanged"),this.h=t}function sl(t){$e.call(this,"emulatorConfigChanged"),this.c=t}function ul(t){$e.call(this,"frameworkChanged"),this.f=t}function cl(t){return t.gb||ke(new N("auth-domain-config-required"))}function hl(t){if(!xr())return ke(new N("operation-not-supported-in-this-environment"));var e=cl(t).then((function(){return t.b.qa()})).then((function(t){return t?ei(t):null}));return gl(t,e)}function ll(t,e){dl(t)&&(function(t,e){J(t.R,(function(t){return t==e}))}(dl(t),t.Ba),dn(dl(t),"tokenChanged",t.ya),dn(dl(t),"userDeleted",t.za),dn(dl(t),"userInvalidated",t.Aa),Sh(dl(t))),e&&(e.R.push(t.Ba),ln(e,"tokenChanged",t.ya),ln(e,"userDeleted",t.za),ln(e,"userInvalidated",t.Aa),0<t.A&&Th(e)),Zr(t,"currentUser",e),e&&(e.wa(t.ka()),bh(e,t),Eh(e,t.N),Ch(e,t),as(e.a,t.f),wh(e,t))}function pl(t,e){var n=null,r=null;return gl(t,e.then((function(e){return n=Wo(e),r=$i(e),function(t,e){var n={};return n.apiKey=fl(t).options.apiKey,n.authDomain=fl(t).options.authDomain,n.appName=fl(t).name,t.f&&(n.emulatorConfig=t.f),t.$.then((function(){return function(t,e,n,r){var i=new _h(t,e);return n&&(i.ha=n),r&&Eh(i,r),i.reload().then((function(){return i}))}(n,e,t.G,t.Ga())})).then((function(e){return dl(t)&&e.uid==dl(t).uid?(Mh(dl(t),e),t.da(e)):(ll(t,e),Ph(e),t.da(e))})).then((function(){yl(t)}))}(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),t,E(t.jc,t))),n||e})).then((function(){return ei({user:dl(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function fl(t){return t.app}function dl(t){return t.currentUser}function vl(t){return dl(t)&&dl(t)._lat||null}function yl(t){if(t.ba){for(var e=0;e<t.u.length;e++)t.u[e]&&t.u[e](vl(t));if(t.X!==t.getUid()&&t.P.length)for(t.X=t.getUid(),e=0;e<t.P.length;e++)t.P[e]&&t.P[e](vl(t))}}function gl(t,e){return t.R.push(e),e.na((function(){X(t.R,e)})),e}function ml(){}function _l(){this.a={},this.b=1e12}Jh.prototype.wb=function(t){var e=null,n=this;return function(t){var e=new N("invalid-persistence-type"),n=new N("unsupported-persistence-type");t:{for(r in tc)if(tc[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(Ir()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Ou()&&"none"!==t)throw n;break;default:if(!Or()&&"none"!==t)throw n}}(t),il(this,(function(){return t!=n.c.D?n.b.get(n.c,n.a).then((function(r){return e=r,$h(n,t)})).then((function(){if(n.c=tl(t),e)return n.b.set(n.c,e,n.a)})):Pe()}))},T(ol,Cn),T(al,$e),T(sl,$e),T(ul,$e),(t=ol.prototype).wb=function(t){return gl(this,t=this.l.wb(t))},t.wa=function(t){this.aa===t||this.m||(this.aa=t,os(this.a,this.aa),this.dispatchEvent(new al(this.ka())))},t.ka=function(){return this.aa},t.ed=function(){var t=u.navigator;this.wa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.fd=function(t){if(!this.f){if(!/^https?:\/\//.test(t))throw new N("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");Kr("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),u.document&&br().then((function(){var t=u.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#ff0000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),u.document.body.appendChild(t)})),this.f={url:t},this.settings.hb=!0,as(this.a,this.f),this.dispatchEvent(new sl(this.f))}},t.Fc=function(t){this.N.push(t),us(this.a,a.Z.SDK_VERSION?kr(a.Z.SDK_VERSION,this.N):null),this.dispatchEvent(new ul(this.N))},t.Ga=function(){return Z(this.N)},t.xb=function(t){this.W===t||this.m||(this.W=t,this.a.b=this.W)},t.S=function(){return this.W},t.toJSON=function(){return{apiKey:fl(this).options.apiKey,authDomain:fl(this).options.authDomain,appName:fl(this).name,currentUser:dl(this)&&dl(this).w()}},t.Eb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.h==e&&!!this.g;default:return!1}},t.ma=function(t,e,n,r){"signInViaPopup"==t&&this.h==r&&(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.h==e&&this.g?E(this.hc,this):null},t.hc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.$.then((function(){return pl(i,ws(i.a,o))}))},t.Wc=function(t){if(!xr())return ke(new N("operation-not-supported-in-this-environment"));var e=this,n=Ji(t.providerId),r=Wr(),i=null;(!Mr()||Er())&&fl(this).options.authDomain&&t.isOAuthProvider&&(i=_u(fl(this).options.authDomain,fl(this).options.apiKey,fl(this).name,"signInViaPopup",t,null,r,a.Z.SDK_VERSION||null,null,null,this.S(),this.f));var o=gr(i,n&&n.ua,n&&n.ta);return gl(this,n=cl(this).then((function(n){return jc(n,o,"signInViaPopup",t,r,!!i,e.S())})).then((function(){return new Ee((function(t,n){e.ma("signInViaPopup",null,new N("cancelled-popup-request"),e.h),e.g=t,e.O=n,e.h=r,e.c=Wc(e.b,e,"signInViaPopup",o,r)}))})).then((function(t){return o&&yr(o),t?ei(t):null})).o((function(t){throw o&&yr(o),t})))},t.Xc=function(t){if(!xr())return ke(new N("operation-not-supported-in-this-environment"));var e=this;return gl(this,cl(this).then((function(){return function(t){return il(t,(function(){return t.b.set(Zh,t.c.D,t.a)}))}(e.l)})).then((function(){return Vc(e.b,"signInViaRedirect",t,void 0,e.S())})))},t.qa=function(){var t=this;return hl(this).then((function(e){return t.b&&Gc(t.b.b),e})).o((function(e){throw t.b&&Gc(t.b.b),e}))},t.cd=function(t){if(!t)return ke(new N("null-user"));if(this.W!=t.tenantId)return ke(new N("tenant-id-mismatch"));var e=this,n={};n.apiKey=fl(this).options.apiKey,n.authDomain=fl(this).options.authDomain,n.appName=fl(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[ts]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new _h(e||{apiKey:t.l,authDomain:t.s,appName:t.m},o),n&&(e.ha=n),r&&Eh(e,r),Mh(e,t),e}(t,n,e.G,e.Ga());return gl(this,this.i.then((function(){if(fl(e).options.apiKey!=t.l)return r.reload()})).then((function(){return dl(e)&&t.uid==dl(e).uid?(Mh(dl(e),t),e.da(t)):(ll(e,r),Ph(r),e.da(r))})).then((function(){yl(e)})))},t.zb=function(){var t=this;return gl(this,this.i.then((function(){return t.b&&Gc(t.b.b),dl(t)?(ll(t,null),nl(t.l).then((function(){yl(t)}))):Pe()})))},t.Yc=function(){var t=this;return rl(this.l,fl(this).options.authDomain).then((function(e){if(!t.m){var n;if(n=dl(t)&&e){n=dl(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Mh(dl(t),e),dl(t).I();(dl(t)||e)&&(ll(t,e),e&&(Ph(e),e.ha=t.G),t.b&&xc(t.b,t),yl(t))}}))},t.da=function(t){return el(this.l,t)},t.kc=function(){yl(this),this.da(dl(this))},t.vc=function(){this.zb()},t.wc=function(){this.zb()},t.jc=function(t){var e=this;return this.i.then((function(){return pl(e,Pe(t))}))},t.yc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(dl(e))}))},t.zc=function(t){var e=this;!function(t,e){t.P.push(e),gl(t,t.i.then((function(){!t.m&&Y(t.P,e)&&t.X!==t.getUid()&&(t.X=t.getUid(),e(vl(t)))})))}(this,(function(){t.next(dl(e))}))},t.Hc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(dl(r)):"function"==typeof t.next&&t.next(dl(r))})),this.ac(t,e,n)},t.Gc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){r.X=r.getUid(),"function"==typeof t?t(dl(r)):"function"==typeof t.next&&t.next(dl(r))})),this.bc(t,e,n)},t.mc=function(t){var e=this;return gl(this,this.i.then((function(){return dl(e)?dl(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Sc=function(t){var e=this;return this.i.then((function(){return pl(e,iu(e.a,$s,{token:t}))})).then((function(t){var n=t.user;return Fh(n,"isAnonymous",!1),e.da(n),t}))},t.Tc=function(t,e){var n=this;return this.i.then((function(){return pl(n,iu(n.a,Zs,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.i.then((function(){return pl(n,iu(n.a,Ns,{email:t,password:e}))}))},t.Za=function(t){var e=this;return this.i.then((function(){return pl(e,t.ja(e.a))}))},t.Rc=function(t){return Jr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Za(t)},t.yb=function(){var t=this;return this.i.then((function(){var e=dl(t);if(e&&e.isAnonymous){var n=ei({providerId:null,isNewUser:!1});return ei({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return pl(t,t.a.yb()).then((function(e){var n=e.user;return Fh(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return dl(this)&&dl(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.A++,0<this.A&&dl(this)&&Th(dl(this))},t.Oc=function(t){var e=this;Q(this.u,(function(n){n==t&&e.A--})),0>this.A&&(this.A=0),0==this.A&&dl(this)&&Sh(dl(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.u.push(t),gl(this,this.i.then((function(){e.m||Y(e.u,t)&&t(vl(e))})))},t.removeAuthTokenListener=function(t){J(this.u,(function(e){return e==t}))},t.delete=function(){this.m=!0;for(var t=0;t<this.R.length;t++)this.R[t].cancel("app-deleted");return this.R=[],this.l&&(t=this.l).b.removeListener(tl("local"),t.a,this.pa),this.b&&(Lc(this.b,this),Gc(this.b.b)),Promise.resolve()},t.gc=function(t){return gl(this,function(t,e){return iu(t,As,{identifier:e,continueUri:Lr()?pr():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Ac=function(t){return!!Lo(t)},t.vb=function(t,e){var n=this;return gl(this,Pe().then((function(){var t=new Oi(e);if(!t.c)throw new N("argument-error",Fi+" must be true when sending sign in link to email");return Hi(t)})).then((function(e){return n.a.vb(t,e)})).then((function(){})))},t.hd=function(t){return this.Qa(t).then((function(t){return t.data.email}))},t.mb=function(t,e){return gl(this,this.a.mb(t,e).then((function(){})))},t.Qa=function(t){return gl(this,this.a.Qa(t).then((function(t){return new hi(t)})))},t.ib=function(t){return gl(this,this.a.ib(t).then((function(){})))},t.ub=function(t,e){var n=this;return gl(this,Pe().then((function(){return void 0===e||vt(e)?{}:Hi(new Oi(e))})).then((function(e){return n.a.ub(t,e)})).then((function(){})))},t.Vc=function(t,e){return gl(this,Zc(this,t,e,E(this.Za,this)))},t.Uc=function(t,e){var n=this;return gl(this,Pe().then((function(){var r=e||pr(),i=xo(t,r);if(!(r=Lo(r)))throw new N("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new N("tenant-id-mismatch");return n.Za(i)})))},ml.prototype.render=function(){},ml.prototype.reset=function(){},ml.prototype.getResponse=function(){},ml.prototype.execute=function(){};var bl=null;function wl(t,e){return(e=El(e))&&t.a[e]||null}function El(t){return(t=void 0===t?1e12:t)?t.toString():null}function Cl(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=he(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():ln(this.f,"click",this.i)}function Il(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function Tl(){}function Sl(){}_l.prototype.render=function(t,e){return this.a[this.b.toString()]=new Cl(t,e),this.b++},_l.prototype.reset=function(t){var e=wl(this,t);t=El(t),e&&t&&(e.delete(),delete this.a[t])},_l.prototype.getResponse=function(t){return(t=wl(this,t))?t.getResponse():null},_l.prototype.execute=function(t){(t=wl(this,t))&&t.execute()},Cl.prototype.getResponse=function(){return Il(this),this.b},Cl.prototype.execute=function(){Il(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},Cl.prototype.delete=function(){Il(this),this.g=!0,clearTimeout(this.a),this.a=null,dn(this.f,"click",this.i)},Zr(Tl,"FACTOR_ID","phone"),Sl.prototype.g=function(){return bl||(bl=new _l),Pe(bl)},Sl.prototype.c=function(){};var Nl=null;function Al(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Pl=new bt(It,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),kl=new Br(3e4,6e4);Al.prototype.g=function(t){var e=this;return new Ee((function(n,r){var i=setTimeout((function(){r(new N("network-request-failed"))}),kl.get());!u.grecaptcha||t!==e.f&&!e.b?(u[e.a]=function(){if(u.grecaptcha){e.f=t;var o=u.grecaptcha.render;u.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new N("internal-error"));delete u[e.a]},Pe(Qa(At(Pl,{onload:e.a,hl:t||""}))).o((function(){clearTimeout(i),r(new N("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},Al.prototype.c=function(){this.b--};var Rl=null;function Dl(t,e,n,r,i,o,a){if(Zr(this,"type","recaptcha"),this.c=this.f=null,this.A=!1,this.m=e,this.g=null,a?(Nl||(Nl=new Sl),a=Nl):(Rl||(Rl=new Al),a=Rl),this.v=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Ll])throw new N("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Fl],!u.document)throw new N("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!he(e)||!this.i&&he(e).hasChildNodes())throw new N("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new $a(t,o||null,i||null),this.u=r||function(){return null};var s=this;this.l=[];var c=this.a[Ol];this.a[Ol]=function(t){if(Ml(s,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Dr(c,u);"function"==typeof e&&e(t)}};var h=this.a[xl];this.a[xl]=function(){if(Ml(s,null),"function"==typeof h)h();else if("string"==typeof h){var t=Dr(h,u);"function"==typeof t&&t()}}}var Ol="callback",xl="expired-callback",Ll="sitekey",Fl="size";function Ml(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function jl(t,e){return t.h.push(e),e.na((function(){X(t.h,e)})),e}function Ul(t){if(t.A)throw new N("internal-error","RecaptchaVerifier instance has been destroyed.")}function Vl(t,e,n){var r=!1;try{this.b=n||a.Z.app()}catch(t){throw new N("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new N("invalid-api-key");n=this.b.options.apiKey;var i=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=a.Z.SDK_VERSION?kr(a.Z.SDK_VERSION,o):null,Dl.call(this,n,t,e,(function(){try{var t=i.b.auth().ka()}catch(e){t=null}return t}),o,O(P),r)}function Wl(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new N("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=ql.length)throw new N("internal-error","Argument validator received an unsupported number of arguments.");n=ql[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new N("argument-error",t+" failed: "+r)}(t=Dl.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=jl(this,Pe().then((function(){if(Lr()&&!Cr())return br();throw new N("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.v.g(t.u())})).then((function(e){return t.g=e,iu(t.s,Ws,{})})).then((function(e){t.a[Ll]=e.recaptchaSiteKey})).o((function(e){throw t.f=null,e})))},t.render=function(){Ul(this);var t=this;return jl(this,this.Ia().then((function(){if(null===t.c){var e=t.m;if(!t.i){var n=he(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!ce&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Qt(a.name),'"'),a.type){o.push(' type="',Qt(a.type),'"');var s={};mt(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=ye(i,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):le(o,a)),2<r.length&&ve(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Ul(this);var t=this;return jl(this,this.render().then((function(e){return new Ee((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){J(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Ul(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Ul(this),this.A=!0,this.v.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=he(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},T(Vl,Dl);var ql="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Hl(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Bl(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Ql(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:y}}function Kl(t,e){return{name:t||"",J:"a function",optional:!!e,K:function(t){return"function"==typeof t}}}function Gl(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function zl(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ja||!n)}}}function Yl(t,e){return y(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function Xl(t){return y(t)&&"string"==typeof t.uid}function Jl(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function $l(t,e){for(var n in e){var r=e[n].name;t[r]=ep(r,t[n],e[n].j)}}function Zl(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:C((function(t){return this[t]}),n),set:C((function(t,e,n,r){Wl(t,[n],[r],!0),this[e]=r}),r,n,e[n].jb),enumerable:!0})}}function tp(t,e,n,r){t[e]=ep(e,n,r)}function ep(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return Wl(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}$l(ol.prototype,{ib:{name:"applyActionCode",j:[Hl("code")]},Qa:{name:"checkActionCode",j:[Hl("code")]},mb:{name:"confirmPasswordReset",j:[Hl("code"),Hl("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[Hl("email"),Hl("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[Hl("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[Hl("emailLink")]},Gc:{name:"onAuthStateChanged",j:[Jl(Ql(),Kl(),"nextOrObserver"),Kl("opt_error",!0),Kl("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",j:[Jl(Ql(),Kl(),"nextOrObserver"),Kl("opt_error",!0),Kl("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[Hl("email"),Jl(Ql("opt_actionCodeSettings",!0),Gl(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[Hl("email"),Ql("actionCodeSettings")]},wb:{name:"setPersistence",j:[Hl("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[zl()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[zl()]},Sc:{name:"signInWithCustomToken",j:[Hl("token")]},Tc:{name:"signInWithEmailAndPassword",j:[Hl("email"),Hl("password")]},Uc:{name:"signInWithEmailLink",j:[Hl("email"),Hl("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[Hl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Wc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Xc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cd:{name:"updateCurrentUser",j:[Jl({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof _h)}},Gl(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Hl(null,!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[Hl("url")]},hd:{name:"verifyPasswordResetCode",j:[Hl("code")]}}),Zl(ol.prototype,{lc:{name:"languageCode",jb:Jl(Hl(),Gl(),"languageCode")},ti:{name:"tenantId",jb:Jl(Hl(),Gl(),"tenantId")}}),ol.Persistence=tc,ol.Persistence.LOCAL="local",ol.Persistence.SESSION="session",ol.Persistence.NONE="none",$l(_h.prototype,{delete:{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[Bl("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Bl("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[zl()]},pb:{name:"linkWithCredential",j:[zl()]},Cc:{name:"linkWithPhoneNumber",j:[Hl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Dc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ec:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[zl()]},sb:{name:"reauthenticateWithCredential",j:[zl()]},Lc:{name:"reauthenticateWithPhoneNumber",j:[Hl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Mc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Nc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[Jl(Ql("opt_actionCodeSettings",!0),Gl(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Hl(null,!0)]},bd:{name:"unlink",j:[Hl("provider")]},Ab:{name:"updateEmail",j:[Hl("email")]},Bb:{name:"updatePassword",j:[Hl("password")]},dd:{name:"updatePhoneNumber",j:[zl("phone")]},Cb:{name:"updateProfile",j:[Ql("profile")]},Db:{name:"verifyBeforeUpdateEmail",j:[Hl("email"),Jl(Ql("opt_actionCodeSettings",!0),Gl(null,!0),"opt_actionCodeSettings",!0)]}}),$l(_l.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),$l(ml.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),$l(Ee.prototype,{na:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),Zl(Jc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:Bl("appVerificationDisabledForTesting")}}),$l($c.prototype,{confirm:{name:"confirm",j:[Hl("verificationCode")]}}),tp(lo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[_o,Do,Mo,yo],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[Jl(Hl(),Ql(),"json")]),tp(Oo,"credential",(function(t,e){return new Ro(t,e)}),[Hl("email"),Hl("password")]),$l(Ro.prototype,{w:{name:"toJSON",j:[Hl(null,!0)]}}),$l(Co.prototype,{Ca:{name:"addScope",j:[Hl("scope")]},Ka:{name:"setCustomParameters",j:[Ql("customOAuthParameters")]}}),tp(Co,"credential",Io,[Jl(Hl(),Ql(),"token")]),tp(Oo,"credentialWithLink",xo,[Hl("email"),Hl("emailLink")]),$l(To.prototype,{Ca:{name:"addScope",j:[Hl("scope")]},Ka:{name:"setCustomParameters",j:[Ql("customOAuthParameters")]}}),tp(To,"credential",So,[Jl(Hl(),Ql(),"token")]),$l(No.prototype,{Ca:{name:"addScope",j:[Hl("scope")]},Ka:{name:"setCustomParameters",j:[Ql("customOAuthParameters")]}}),tp(No,"credential",Ao,[Jl(Hl(),Jl(Ql(),Gl()),"idToken"),Jl(Hl(),Gl(),"accessToken",!0)]),$l(Po.prototype,{Ka:{name:"setCustomParameters",j:[Ql("customOAuthParameters")]}}),tp(Po,"credential",ko,[Jl(Hl(),Ql(),"token"),Hl("secret",!0)]),$l(Eo.prototype,{Ca:{name:"addScope",j:[Hl("scope")]},credential:{name:"credential",j:[Jl(Hl(),Jl(Ql(),Gl()),"optionsOrIdToken"),Jl(Hl(),Gl(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Ql("customOAuthParameters")]}}),$l(go.prototype,{w:{name:"toJSON",j:[Hl(null,!0)]}}),$l(fo.prototype,{w:{name:"toJSON",j:[Hl(null,!0)]}}),tp(Uo,"credential",Vo,[Hl("verificationId"),Hl("verificationCode")]),$l(Uo.prototype,{eb:{name:"verifyPhoneNumber",j:[Jl(Hl(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Yl(t.session,co)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Yl(t.session,ho)&&Xl(t.multiFactorHint):t.session&&t.multiFactorUid?Yl(t.session,ho)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),$l(Fo.prototype,{w:{name:"toJSON",j:[Hl(null,!0)]}}),$l(N.prototype,{toJSON:{name:"toJSON",j:[Hl(null,!0)]}}),$l(Yo.prototype,{toJSON:{name:"toJSON",j:[Hl(null,!0)]}}),$l(zo.prototype,{toJSON:{name:"toJSON",j:[Hl(null,!0)]}}),$l(ih.prototype,{toJSON:{name:"toJSON",j:[Hl(null,!0)]}}),$l(eh.prototype,{Qc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}}]}}),$l(hh.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}},Hl("displayName",!0)]},ad:{name:"unenroll",j:[Jl({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Xl},Hl(),"multiFactorInfoIdentifier")]}}),$l(Vl.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),tp(Ii,"parseLink",Di,[Hl("link")]),tp(Tl,"assertion",(function(t){return new uh(t)}),[zl("phone")]),function(){if(void 0===a.Z||!a.Z.INTERNAL||!a.Z.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:pi,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:li,VERIFY_AND_CHANGE_EMAIL:fi,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:ol,AuthCredential:lo,Error:N};tp(t,"EmailAuthProvider",Oo,[]),tp(t,"FacebookAuthProvider",Co,[]),tp(t,"GithubAuthProvider",To,[]),tp(t,"GoogleAuthProvider",No,[]),tp(t,"TwitterAuthProvider",Po,[]),tp(t,"OAuthProvider",Eo,[Hl("providerId")]),tp(t,"SAMLAuthProvider",wo,[Hl("providerId")]),tp(t,"PhoneAuthProvider",Uo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof ol)}}]),tp(t,"RecaptchaVerifier",Vl,[Jl(Hl(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Ql("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof a.Z.app.App)}}]),tp(t,"ActionCodeURL",Ii,[]),tp(t,"PhoneMultiFactorGenerator",Tl,[]),a.Z.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new ol(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),a.Z.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:E((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:E(t.mc,t),addAuthTokenListener:E(t.cc,t),removeAuthTokenListener:E(t.Oc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),a.Z.registerVersion("@firebase/auth","0.15.3"),a.Z.INTERNAL.extendNamespace({User:_h})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),a.Z.initializeApp({apiKey:"AIzaSyAIkbPrsnDlcA8IURS7y0P5JAnLjiMnHJM",authDomain:"passwordmaster-f995d.firebaseapp.com",databaseURL:"https://passwordmaster-f995d-default-rtdb.firebaseio.com",projectId:"passwordmaster-f995d",storageBucket:"passwordmaster-f995d.appspot.com",messagingSenderId:"515467520928",appId:"1:515467520928:web:f34eebb94b4eb5879352c5",measurementId:"G-70BNHQJX12"});const s=document.getElementById("sub-nav"),u=document.getElementById("control-nav"),c=document.querySelector(".container-col"),h=document.getElementById("add-new-card"),l=(document.getElementById("login-account"),document.getElementById("main-wrapper")),p=document.getElementById("changeCardOrList");function f(t,e=null){return`<div class="col-md-4 col-xs-12 server-content">\n                    <div class="main-wrapper__item" data-name="${e}" autofocus>\n                        <div class="item-header">\n                            <h3 class="title-passcard">${t.nameSource}</h3>\n                        </div>\n                        <div class="item-body">\n                            <div class="item-panel">\n                                <label>Login:</label>\n                                <p class="login-field">${t.login}</p>\n                            </div>\n                            <div class="item-panel">\n                                <label>Password:</label>\n                                <p class="pass-field">${t.password}</p>\n                                <button class="copy-password far fa-copy" autofocus></button>\n\x3c!--                                <i class="far fa-copy"></i>--\x3e\n                            </div>\n                        </div>\n                        <div class="item-footer">\n                            <p class="date-field" title="Date of creation">${new Date(t.date).toLocaleDateString()}</p>\n                            <div class="item-btn" data-name="${e}">\n                                <button class="btn-edit-passcard btn-card" title="Edit" autofocus><img src="assets/img/edit.svg" data-button="edit-card" alt=""></button>\n                                <button class="btn-delete-passcard btn-card" title="Delete" autofocus>\n                                <img  src="assets/img/delete.svg" data-button="delete-card" alt="">\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    </div>`}function d(){setTimeout((()=>{document.querySelector(".modal-wrapper").classList.remove("hidden-modal")}),100)}function v(){return{nameSource:document.getElementById("input-name-source"),login:document.getElementById("input-login-source"),password:document.getElementById("input-pass-source")}}function y(t){const e=document.querySelectorAll(".server-content"),n=document.querySelectorAll(".temp");if(t){for(let t of e)t.remove();for(let t of n)t.style.visibility="visible"}else for(let t of n)t.style.visibility="hidden"}"home"!==document.body.dataset.body&&(document.addEventListener("DOMContentLoaded",(function(){window.matchMedia("(max-width:769px)").matches&&(s.classList.add("disable-panel"),s.classList.remove("enable-panel"),s.style.width="0px"),i.getAll().then((t=>{for(let t of document.querySelectorAll(".temp"))t.style.visibility="hidden";i.renderToHtml(t)})).catch((t=>console.log(t)))})),document.addEventListener("click",(function(t){var n;(function(t){t.target.dataset.id&&(y(!0),async function(t,e,n){return await a.Z.database().ref(`password/${e}`).set(n)}(0,t.target.dataset.id,{password:document.getElementById("input-pass-edit").value,login:document.getElementById("input-login-edit").value,nameSource:document.getElementById("input-source-edit").value,date:(new Date).toJSON()}).then((()=>{i.getAll().then((t=>{i.renderToHtml(t),y(),e()}))})).catch((t=>console.warn(t))))})(t),"btn-close"===(n=t).target.dataset.action&&(n.preventDefault(),e()),function(t){if("add-new-pass"===t.target.dataset.action){t.preventDefault();const e=v();o(e.nameSource.value)&&o(e.login.value)&&o(e.password.value)&&(e.nameSource=e.nameSource.value,e.login=e.login.value,e.password=e.password.value,e.date=(new Date).toJSON(),y(!0),async function(t,e){try{await a.Z.database().ref("password").push(e)}catch(t){throw console.log(t.message),t}}(0,e).then((()=>{(async function(t){try{return(await a.Z.database().ref("password").once("value")).val()}catch(t){throw console.log(t),t}})().then((t=>{i.renderToHtml(t),y();let e=v();!function(...t){t.map((t=>{t.value=""}))}(e.nameSource,e.login,e.password)}))})))}}(t),function(t){var e;t.target.classList.contains("copy-password")&&(e=t.target.previousSibling.previousSibling.textContent,navigator.clipboard.writeText(e)).then((()=>{r("success","Copied","")})).catch((t=>{r("error","Error",t),console.log(t)}))}(t)})),u.addEventListener("click",(function(){s.classList.contains("enable-panel")?(s.classList.add("disable-panel"),s.classList.remove("enable-panel"),s.style.width="0px",c.style.transition="width .55s",c.style.width="100%"):(s.classList.remove("disable-panel"),s.classList.add("enable-panel"),s.style.width="60px",c.style.width="calc(100% - 60px)")})),h.addEventListener("click",(function(){document.body.insertAdjacentHTML("beforeend",function(e="Modal"){return t('<form id="" action="" name="form-add-source" class="form-add-item">\n                <div class="modal-input">\n                    <label for="input-name-source">Name source</label>\n                    <input id="input-name-source" class="inp-source" type="text" required>\n                </div>\n                <div class="modal-input">\n                    <label for="input-login-source">Login</label>\n                    <input id="input-login-source" class="inp-source" type="text" required autocomplete="on">\n                </div>\n                <div class="modal-input">\n                    <label for="input-pass-source">Password</label>\n                    <input id="input-pass-source" class="inp-source" type="text" required autocomplete="on">\n                </div>\n            </form>',e,"Add","add-new-pass")}("Create new item")),d()})),l.addEventListener("click",(function(e){if(e.target.dataset.button){const n=e.target.parentNode.parentNode.dataset.name;"edit-card"===e.target.dataset.button?async function(t,e){return await a.Z.database().ref(`password/${e}`).once("value")}(0,n).then((e=>{var r,i;document.body.insertAdjacentHTML("beforeend",("Edit",r=e.val(),i=n,t(`<form id="" action="" name="form-edit-card" class="form-edit">\n                <div class="modal-input">\n                    <label for="input-source-edit">Name source</label>\n                    <input id="input-source-edit" class="inp-source" type="text" autocomplete="on" value="${r.nameSource}">\n                </div>\n                <div class="modal-input">\n                    <label for="input-login-edit">Login</label>\n                    <input id="input-login-edit" class="inp-source" type="text" autocomplete="on" value="${r.login}">\n                </div>\n                <div class="modal-input">\n                    <label for="input-pass-edit">Password</label>\n                    <input id="input-pass-edit" class="inp-source" type="text" minlength="8" autocomplete="on" value="${r.password}">\n                </div>\n            </form>`,"Edit","Save","save-card",i))),d()})):(y("start"),async function(t,e){return await a.Z.database().ref(`password/${e}`).remove().then((()=>{r("success","Success","The card is successfully deleted!")})).catch((t=>{console.warn(t),r("error","Error","The card is`t deleted!")}))}(0,n).then((()=>{i.getAll().then((t=>{i.renderToHtml(t),y()}))})))}})),p.addEventListener("click",(function(t){const e=document.querySelectorAll(".main-wrapper__item");t.preventDefault(),t.target.classList.contains("fa-th")?(t.target.classList.remove("fa-th"),t.target.classList.add("fa-bars"),l.classList.add("type-list-col"),e.forEach((t=>{t.classList.add("type-list-row"),t.parentNode.classList.remove("col-md-4"),t.childNodes.forEach((t=>{"#text"!==t.nodeName&&t.classList.add("col-md-4")}))})),document.querySelectorAll(".item-body").forEach((t=>t.classList.add("row-space-between")))):(t.target.classList.add("fa-th"),t.target.classList.remove("fa-bars"),l.classList.remove("type-list-col"),e.forEach((t=>{t.classList.remove("type-list-row"),t.parentNode.classList.add("col-md-4"),t.childNodes.forEach((t=>{"#text"!==t.nodeName&&t.classList.remove("col-md-4")}))})),document.querySelectorAll(".item-body").forEach((t=>t.classList.remove("row-space-between"))))})),console.log("page MP")),console.log("app.js")}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,